// historial de comandos

npm init -y 
npm install express
npm install typescript ts-node nodemon @types/node @types/express
npm run dev      
npx prisma migrate dev --name "init"    // actualizar db
npx prisma studio  // ver la db
npm install @prisma/client


// generar llaves:
openssl req -x509 -out keys/certificado-publico.pem -keyout keys/clave-privada.pem -newkey rsa:2048 -nodes -sha256 -subj '/CN=localhost' -extensions EXT -config <( printf "[dn]\nCN=localhost\n[req]\ndistinguished_name = dn\n[EXT]\nsubjectAltName=DNS:localhost\nkeyUsage=digitalSignature\nextendedKeyUsage=serverAuth")






import express from 'express';
import adminRoutes from './routes/adminRoutes';
import anfitrionRoutes from './routes/anfitrionRoutes';
import inicioRoutes from './routes/inicioRoutes';
import https from 'https';
import fs from 'fs';

import bodyParser from 'body-parser';


const path = require('path');

const app = express();
app.use(express.json());

app.use(express.urlencoded({ extended: true }));
app.use(bodyParser.json());

app.use('/', express.static('./public'));

app.use('/admin', adminRoutes);
app.use('/anfitrion', anfitrionRoutes);
app.use('/home', inicioRoutes);

app.get('/', (req, res) => {
  res.send('Hello World 2');
});

/*
  Este par de claves se puede utilizar para desarrollo y pruebas, pero para un entorno de producción, deberías considerar obtener un
  certificado de una Autoridad de Certificación (CA) confiable.
*/
// Configuración de SSL
const opcionesSSL = {
  key: fs.readFileSync('keys/clave-privada.pem'),
  cert: fs.readFileSync('keys/certificado-publico.pem')
};

// Crear servidor HTTPS
const servidorHTTPS = https.createServer(opcionesSSL, app);

servidorHTTPS.listen(3000, () => {
  console.log('Servidor HTTPS listo en localhost:3000');
});
