
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Usuario
 * 
 */
export type Usuario = $Result.DefaultSelection<Prisma.$UsuarioPayload>
/**
 * Model Anfitrion
 * 
 */
export type Anfitrion = $Result.DefaultSelection<Prisma.$AnfitrionPayload>
/**
 * Model Super_Administrador
 * 
 */
export type Super_Administrador = $Result.DefaultSelection<Prisma.$Super_AdministradorPayload>
/**
 * Model Sala
 * 
 */
export type Sala = $Result.DefaultSelection<Prisma.$SalaPayload>
/**
 * Model Reunion
 * 
 */
export type Reunion = $Result.DefaultSelection<Prisma.$ReunionPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Usuarios
 * const usuarios = await prisma.usuario.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Usuarios
   * const usuarios = await prisma.usuario.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.usuario`: Exposes CRUD operations for the **Usuario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuario.findMany()
    * ```
    */
  get usuario(): Prisma.UsuarioDelegate<ExtArgs>;

  /**
   * `prisma.anfitrion`: Exposes CRUD operations for the **Anfitrion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Anfitrions
    * const anfitrions = await prisma.anfitrion.findMany()
    * ```
    */
  get anfitrion(): Prisma.AnfitrionDelegate<ExtArgs>;

  /**
   * `prisma.super_Administrador`: Exposes CRUD operations for the **Super_Administrador** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Super_Administradors
    * const super_Administradors = await prisma.super_Administrador.findMany()
    * ```
    */
  get super_Administrador(): Prisma.Super_AdministradorDelegate<ExtArgs>;

  /**
   * `prisma.sala`: Exposes CRUD operations for the **Sala** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Salas
    * const salas = await prisma.sala.findMany()
    * ```
    */
  get sala(): Prisma.SalaDelegate<ExtArgs>;

  /**
   * `prisma.reunion`: Exposes CRUD operations for the **Reunion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reunions
    * const reunions = await prisma.reunion.findMany()
    * ```
    */
  get reunion(): Prisma.ReunionDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.13.0
   * Query Engine version: b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Usuario: 'Usuario',
    Anfitrion: 'Anfitrion',
    Super_Administrador: 'Super_Administrador',
    Sala: 'Sala',
    Reunion: 'Reunion'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'usuario' | 'anfitrion' | 'super_Administrador' | 'sala' | 'reunion'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Usuario: {
        payload: Prisma.$UsuarioPayload<ExtArgs>
        fields: Prisma.UsuarioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsuarioFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsuarioFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findFirst: {
            args: Prisma.UsuarioFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsuarioFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findMany: {
            args: Prisma.UsuarioFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          create: {
            args: Prisma.UsuarioCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          createMany: {
            args: Prisma.UsuarioCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UsuarioDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          update: {
            args: Prisma.UsuarioUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          deleteMany: {
            args: Prisma.UsuarioDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UsuarioUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UsuarioUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          aggregate: {
            args: Prisma.UsuarioAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUsuario>
          }
          groupBy: {
            args: Prisma.UsuarioGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UsuarioGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsuarioCountArgs<ExtArgs>,
            result: $Utils.Optional<UsuarioCountAggregateOutputType> | number
          }
        }
      }
      Anfitrion: {
        payload: Prisma.$AnfitrionPayload<ExtArgs>
        fields: Prisma.AnfitrionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AnfitrionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AnfitrionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AnfitrionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AnfitrionPayload>
          }
          findFirst: {
            args: Prisma.AnfitrionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AnfitrionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AnfitrionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AnfitrionPayload>
          }
          findMany: {
            args: Prisma.AnfitrionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AnfitrionPayload>[]
          }
          create: {
            args: Prisma.AnfitrionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AnfitrionPayload>
          }
          createMany: {
            args: Prisma.AnfitrionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AnfitrionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AnfitrionPayload>
          }
          update: {
            args: Prisma.AnfitrionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AnfitrionPayload>
          }
          deleteMany: {
            args: Prisma.AnfitrionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AnfitrionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AnfitrionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AnfitrionPayload>
          }
          aggregate: {
            args: Prisma.AnfitrionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAnfitrion>
          }
          groupBy: {
            args: Prisma.AnfitrionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AnfitrionGroupByOutputType>[]
          }
          count: {
            args: Prisma.AnfitrionCountArgs<ExtArgs>,
            result: $Utils.Optional<AnfitrionCountAggregateOutputType> | number
          }
        }
      }
      Super_Administrador: {
        payload: Prisma.$Super_AdministradorPayload<ExtArgs>
        fields: Prisma.Super_AdministradorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Super_AdministradorFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Super_AdministradorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Super_AdministradorFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Super_AdministradorPayload>
          }
          findFirst: {
            args: Prisma.Super_AdministradorFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Super_AdministradorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Super_AdministradorFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Super_AdministradorPayload>
          }
          findMany: {
            args: Prisma.Super_AdministradorFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Super_AdministradorPayload>[]
          }
          create: {
            args: Prisma.Super_AdministradorCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Super_AdministradorPayload>
          }
          createMany: {
            args: Prisma.Super_AdministradorCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.Super_AdministradorDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Super_AdministradorPayload>
          }
          update: {
            args: Prisma.Super_AdministradorUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Super_AdministradorPayload>
          }
          deleteMany: {
            args: Prisma.Super_AdministradorDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.Super_AdministradorUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.Super_AdministradorUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Super_AdministradorPayload>
          }
          aggregate: {
            args: Prisma.Super_AdministradorAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSuper_Administrador>
          }
          groupBy: {
            args: Prisma.Super_AdministradorGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Super_AdministradorGroupByOutputType>[]
          }
          count: {
            args: Prisma.Super_AdministradorCountArgs<ExtArgs>,
            result: $Utils.Optional<Super_AdministradorCountAggregateOutputType> | number
          }
        }
      }
      Sala: {
        payload: Prisma.$SalaPayload<ExtArgs>
        fields: Prisma.SalaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SalaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SalaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SalaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SalaPayload>
          }
          findFirst: {
            args: Prisma.SalaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SalaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SalaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SalaPayload>
          }
          findMany: {
            args: Prisma.SalaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SalaPayload>[]
          }
          create: {
            args: Prisma.SalaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SalaPayload>
          }
          createMany: {
            args: Prisma.SalaCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SalaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SalaPayload>
          }
          update: {
            args: Prisma.SalaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SalaPayload>
          }
          deleteMany: {
            args: Prisma.SalaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SalaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SalaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SalaPayload>
          }
          aggregate: {
            args: Prisma.SalaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSala>
          }
          groupBy: {
            args: Prisma.SalaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SalaGroupByOutputType>[]
          }
          count: {
            args: Prisma.SalaCountArgs<ExtArgs>,
            result: $Utils.Optional<SalaCountAggregateOutputType> | number
          }
        }
      }
      Reunion: {
        payload: Prisma.$ReunionPayload<ExtArgs>
        fields: Prisma.ReunionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReunionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReunionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReunionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReunionPayload>
          }
          findFirst: {
            args: Prisma.ReunionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReunionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReunionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReunionPayload>
          }
          findMany: {
            args: Prisma.ReunionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReunionPayload>[]
          }
          create: {
            args: Prisma.ReunionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReunionPayload>
          }
          createMany: {
            args: Prisma.ReunionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ReunionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReunionPayload>
          }
          update: {
            args: Prisma.ReunionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReunionPayload>
          }
          deleteMany: {
            args: Prisma.ReunionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ReunionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ReunionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReunionPayload>
          }
          aggregate: {
            args: Prisma.ReunionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateReunion>
          }
          groupBy: {
            args: Prisma.ReunionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ReunionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReunionCountArgs<ExtArgs>,
            result: $Utils.Optional<ReunionCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsuarioCountOutputType
   */

  export type UsuarioCountOutputType = {
    Anfitrion: number
    Super_Administrador: number
  }

  export type UsuarioCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Anfitrion?: boolean | UsuarioCountOutputTypeCountAnfitrionArgs
    Super_Administrador?: boolean | UsuarioCountOutputTypeCountSuper_AdministradorArgs
  }

  // Custom InputTypes
  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioCountOutputType
     */
    select?: UsuarioCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountAnfitrionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnfitrionWhereInput
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountSuper_AdministradorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Super_AdministradorWhereInput
  }


  /**
   * Count Type AnfitrionCountOutputType
   */

  export type AnfitrionCountOutputType = {
    Reunion: number
  }

  export type AnfitrionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Reunion?: boolean | AnfitrionCountOutputTypeCountReunionArgs
  }

  // Custom InputTypes
  /**
   * AnfitrionCountOutputType without action
   */
  export type AnfitrionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnfitrionCountOutputType
     */
    select?: AnfitrionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AnfitrionCountOutputType without action
   */
  export type AnfitrionCountOutputTypeCountReunionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReunionWhereInput
  }


  /**
   * Count Type SalaCountOutputType
   */

  export type SalaCountOutputType = {
    Reunion: number
  }

  export type SalaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Reunion?: boolean | SalaCountOutputTypeCountReunionArgs
  }

  // Custom InputTypes
  /**
   * SalaCountOutputType without action
   */
  export type SalaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaCountOutputType
     */
    select?: SalaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SalaCountOutputType without action
   */
  export type SalaCountOutputTypeCountReunionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReunionWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Usuario
   */

  export type AggregateUsuario = {
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  export type UsuarioAvgAggregateOutputType = {
    ID_Usuario: number | null
    Telefono: Decimal | null
  }

  export type UsuarioSumAggregateOutputType = {
    ID_Usuario: number | null
    Telefono: Decimal | null
  }

  export type UsuarioMinAggregateOutputType = {
    ID_Usuario: number | null
    Email: string | null
    Contrasena: string | null
    Nombre: string | null
    Apellido_Paterno: string | null
    Apellido_Materno: string | null
    Telefono: Decimal | null
  }

  export type UsuarioMaxAggregateOutputType = {
    ID_Usuario: number | null
    Email: string | null
    Contrasena: string | null
    Nombre: string | null
    Apellido_Paterno: string | null
    Apellido_Materno: string | null
    Telefono: Decimal | null
  }

  export type UsuarioCountAggregateOutputType = {
    ID_Usuario: number
    Email: number
    Contrasena: number
    Nombre: number
    Apellido_Paterno: number
    Apellido_Materno: number
    Telefono: number
    _all: number
  }


  export type UsuarioAvgAggregateInputType = {
    ID_Usuario?: true
    Telefono?: true
  }

  export type UsuarioSumAggregateInputType = {
    ID_Usuario?: true
    Telefono?: true
  }

  export type UsuarioMinAggregateInputType = {
    ID_Usuario?: true
    Email?: true
    Contrasena?: true
    Nombre?: true
    Apellido_Paterno?: true
    Apellido_Materno?: true
    Telefono?: true
  }

  export type UsuarioMaxAggregateInputType = {
    ID_Usuario?: true
    Email?: true
    Contrasena?: true
    Nombre?: true
    Apellido_Paterno?: true
    Apellido_Materno?: true
    Telefono?: true
  }

  export type UsuarioCountAggregateInputType = {
    ID_Usuario?: true
    Email?: true
    Contrasena?: true
    Nombre?: true
    Apellido_Paterno?: true
    Apellido_Materno?: true
    Telefono?: true
    _all?: true
  }

  export type UsuarioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuario to aggregate.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Usuarios
    **/
    _count?: true | UsuarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsuarioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsuarioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuarioMaxAggregateInputType
  }

  export type GetUsuarioAggregateType<T extends UsuarioAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuario[P]>
      : GetScalarType<T[P], AggregateUsuario[P]>
  }




  export type UsuarioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsuarioWhereInput
    orderBy?: UsuarioOrderByWithAggregationInput | UsuarioOrderByWithAggregationInput[]
    by: UsuarioScalarFieldEnum[] | UsuarioScalarFieldEnum
    having?: UsuarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuarioCountAggregateInputType | true
    _avg?: UsuarioAvgAggregateInputType
    _sum?: UsuarioSumAggregateInputType
    _min?: UsuarioMinAggregateInputType
    _max?: UsuarioMaxAggregateInputType
  }

  export type UsuarioGroupByOutputType = {
    ID_Usuario: number
    Email: string
    Contrasena: string
    Nombre: string
    Apellido_Paterno: string
    Apellido_Materno: string
    Telefono: Decimal
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  type GetUsuarioGroupByPayload<T extends UsuarioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsuarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
            : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
        }
      >
    >


  export type UsuarioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID_Usuario?: boolean
    Email?: boolean
    Contrasena?: boolean
    Nombre?: boolean
    Apellido_Paterno?: boolean
    Apellido_Materno?: boolean
    Telefono?: boolean
    Anfitrion?: boolean | Usuario$AnfitrionArgs<ExtArgs>
    Super_Administrador?: boolean | Usuario$Super_AdministradorArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectScalar = {
    ID_Usuario?: boolean
    Email?: boolean
    Contrasena?: boolean
    Nombre?: boolean
    Apellido_Paterno?: boolean
    Apellido_Materno?: boolean
    Telefono?: boolean
  }


  export type UsuarioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Anfitrion?: boolean | Usuario$AnfitrionArgs<ExtArgs>
    Super_Administrador?: boolean | Usuario$Super_AdministradorArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UsuarioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Usuario"
    objects: {
      Anfitrion: Prisma.$AnfitrionPayload<ExtArgs>[]
      Super_Administrador: Prisma.$Super_AdministradorPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      ID_Usuario: number
      Email: string
      Contrasena: string
      Nombre: string
      Apellido_Paterno: string
      Apellido_Materno: string
      Telefono: Prisma.Decimal
    }, ExtArgs["result"]["usuario"]>
    composites: {}
  }


  type UsuarioGetPayload<S extends boolean | null | undefined | UsuarioDefaultArgs> = $Result.GetResult<Prisma.$UsuarioPayload, S>

  type UsuarioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UsuarioFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsuarioCountAggregateInputType | true
    }

  export interface UsuarioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Usuario'], meta: { name: 'Usuario' } }
    /**
     * Find zero or one Usuario that matches the filter.
     * @param {UsuarioFindUniqueArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UsuarioFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UsuarioFindUniqueArgs<ExtArgs>>
    ): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Usuario that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UsuarioFindUniqueOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UsuarioFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UsuarioFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Usuario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UsuarioFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UsuarioFindFirstArgs<ExtArgs>>
    ): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Usuario that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UsuarioFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UsuarioFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuario.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuario.findMany({ take: 10 })
     * 
     * // Only select the `ID_Usuario`
     * const usuarioWithID_UsuarioOnly = await prisma.usuario.findMany({ select: { ID_Usuario: true } })
     * 
    **/
    findMany<T extends UsuarioFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsuarioFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Usuario.
     * @param {UsuarioCreateArgs} args - Arguments to create a Usuario.
     * @example
     * // Create one Usuario
     * const Usuario = await prisma.usuario.create({
     *   data: {
     *     // ... data to create a Usuario
     *   }
     * })
     * 
    **/
    create<T extends UsuarioCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UsuarioCreateArgs<ExtArgs>>
    ): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Usuarios.
     *     @param {UsuarioCreateManyArgs} args - Arguments to create many Usuarios.
     *     @example
     *     // Create many Usuarios
     *     const usuario = await prisma.usuario.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UsuarioCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsuarioCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Usuario.
     * @param {UsuarioDeleteArgs} args - Arguments to delete one Usuario.
     * @example
     * // Delete one Usuario
     * const Usuario = await prisma.usuario.delete({
     *   where: {
     *     // ... filter to delete one Usuario
     *   }
     * })
     * 
    **/
    delete<T extends UsuarioDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UsuarioDeleteArgs<ExtArgs>>
    ): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Usuario.
     * @param {UsuarioUpdateArgs} args - Arguments to update one Usuario.
     * @example
     * // Update one Usuario
     * const usuario = await prisma.usuario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UsuarioUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UsuarioUpdateArgs<ExtArgs>>
    ): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Usuarios.
     * @param {UsuarioDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UsuarioDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsuarioDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UsuarioUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UsuarioUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Usuario.
     * @param {UsuarioUpsertArgs} args - Arguments to update or create a Usuario.
     * @example
     * // Update or create a Usuario
     * const usuario = await prisma.usuario.upsert({
     *   create: {
     *     // ... data to create a Usuario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuario we want to update
     *   }
     * })
    **/
    upsert<T extends UsuarioUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UsuarioUpsertArgs<ExtArgs>>
    ): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuario.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends UsuarioCountArgs>(
      args?: Subset<T, UsuarioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuarioAggregateArgs>(args: Subset<T, UsuarioAggregateArgs>): Prisma.PrismaPromise<GetUsuarioAggregateType<T>>

    /**
     * Group by Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsuarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsuarioGroupByArgs['orderBy'] }
        : { orderBy?: UsuarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsuarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuarioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Usuario model
   */
  readonly fields: UsuarioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Usuario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsuarioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Anfitrion<T extends Usuario$AnfitrionArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$AnfitrionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnfitrionPayload<ExtArgs>, T, 'findMany'> | Null>;

    Super_Administrador<T extends Usuario$Super_AdministradorArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$Super_AdministradorArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Super_AdministradorPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Usuario model
   */ 
  interface UsuarioFieldRefs {
    readonly ID_Usuario: FieldRef<"Usuario", 'Int'>
    readonly Email: FieldRef<"Usuario", 'String'>
    readonly Contrasena: FieldRef<"Usuario", 'String'>
    readonly Nombre: FieldRef<"Usuario", 'String'>
    readonly Apellido_Paterno: FieldRef<"Usuario", 'String'>
    readonly Apellido_Materno: FieldRef<"Usuario", 'String'>
    readonly Telefono: FieldRef<"Usuario", 'Decimal'>
  }
    

  // Custom InputTypes
  /**
   * Usuario findUnique
   */
  export type UsuarioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findUniqueOrThrow
   */
  export type UsuarioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findFirst
   */
  export type UsuarioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario findFirstOrThrow
   */
  export type UsuarioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario findMany
   */
  export type UsuarioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario create
   */
  export type UsuarioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to create a Usuario.
     */
    data: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
  }

  /**
   * Usuario createMany
   */
  export type UsuarioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Usuarios.
     */
    data: UsuarioCreateManyInput | UsuarioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Usuario update
   */
  export type UsuarioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to update a Usuario.
     */
    data: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
    /**
     * Choose, which Usuario to update.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario updateMany
   */
  export type UsuarioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Usuarios.
     */
    data: XOR<UsuarioUpdateManyMutationInput, UsuarioUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     */
    where?: UsuarioWhereInput
  }

  /**
   * Usuario upsert
   */
  export type UsuarioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The filter to search for the Usuario to update in case it exists.
     */
    where: UsuarioWhereUniqueInput
    /**
     * In case the Usuario found by the `where` argument doesn't exist, create a new Usuario with this data.
     */
    create: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
    /**
     * In case the Usuario was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
  }

  /**
   * Usuario delete
   */
  export type UsuarioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter which Usuario to delete.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario deleteMany
   */
  export type UsuarioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuarios to delete
     */
    where?: UsuarioWhereInput
  }

  /**
   * Usuario.Anfitrion
   */
  export type Usuario$AnfitrionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anfitrion
     */
    select?: AnfitrionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnfitrionInclude<ExtArgs> | null
    where?: AnfitrionWhereInput
    orderBy?: AnfitrionOrderByWithRelationInput | AnfitrionOrderByWithRelationInput[]
    cursor?: AnfitrionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AnfitrionScalarFieldEnum | AnfitrionScalarFieldEnum[]
  }

  /**
   * Usuario.Super_Administrador
   */
  export type Usuario$Super_AdministradorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Super_Administrador
     */
    select?: Super_AdministradorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Super_AdministradorInclude<ExtArgs> | null
    where?: Super_AdministradorWhereInput
    orderBy?: Super_AdministradorOrderByWithRelationInput | Super_AdministradorOrderByWithRelationInput[]
    cursor?: Super_AdministradorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Super_AdministradorScalarFieldEnum | Super_AdministradorScalarFieldEnum[]
  }

  /**
   * Usuario without action
   */
  export type UsuarioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
  }


  /**
   * Model Anfitrion
   */

  export type AggregateAnfitrion = {
    _count: AnfitrionCountAggregateOutputType | null
    _avg: AnfitrionAvgAggregateOutputType | null
    _sum: AnfitrionSumAggregateOutputType | null
    _min: AnfitrionMinAggregateOutputType | null
    _max: AnfitrionMaxAggregateOutputType | null
  }

  export type AnfitrionAvgAggregateOutputType = {
    ID_Anfitrion: number | null
    ID_Usuario: number | null
  }

  export type AnfitrionSumAggregateOutputType = {
    ID_Anfitrion: number | null
    ID_Usuario: number | null
  }

  export type AnfitrionMinAggregateOutputType = {
    ID_Anfitrion: number | null
    ID_Usuario: number | null
  }

  export type AnfitrionMaxAggregateOutputType = {
    ID_Anfitrion: number | null
    ID_Usuario: number | null
  }

  export type AnfitrionCountAggregateOutputType = {
    ID_Anfitrion: number
    ID_Usuario: number
    _all: number
  }


  export type AnfitrionAvgAggregateInputType = {
    ID_Anfitrion?: true
    ID_Usuario?: true
  }

  export type AnfitrionSumAggregateInputType = {
    ID_Anfitrion?: true
    ID_Usuario?: true
  }

  export type AnfitrionMinAggregateInputType = {
    ID_Anfitrion?: true
    ID_Usuario?: true
  }

  export type AnfitrionMaxAggregateInputType = {
    ID_Anfitrion?: true
    ID_Usuario?: true
  }

  export type AnfitrionCountAggregateInputType = {
    ID_Anfitrion?: true
    ID_Usuario?: true
    _all?: true
  }

  export type AnfitrionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Anfitrion to aggregate.
     */
    where?: AnfitrionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Anfitrions to fetch.
     */
    orderBy?: AnfitrionOrderByWithRelationInput | AnfitrionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AnfitrionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Anfitrions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Anfitrions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Anfitrions
    **/
    _count?: true | AnfitrionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AnfitrionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AnfitrionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AnfitrionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AnfitrionMaxAggregateInputType
  }

  export type GetAnfitrionAggregateType<T extends AnfitrionAggregateArgs> = {
        [P in keyof T & keyof AggregateAnfitrion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAnfitrion[P]>
      : GetScalarType<T[P], AggregateAnfitrion[P]>
  }




  export type AnfitrionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnfitrionWhereInput
    orderBy?: AnfitrionOrderByWithAggregationInput | AnfitrionOrderByWithAggregationInput[]
    by: AnfitrionScalarFieldEnum[] | AnfitrionScalarFieldEnum
    having?: AnfitrionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AnfitrionCountAggregateInputType | true
    _avg?: AnfitrionAvgAggregateInputType
    _sum?: AnfitrionSumAggregateInputType
    _min?: AnfitrionMinAggregateInputType
    _max?: AnfitrionMaxAggregateInputType
  }

  export type AnfitrionGroupByOutputType = {
    ID_Anfitrion: number
    ID_Usuario: number
    _count: AnfitrionCountAggregateOutputType | null
    _avg: AnfitrionAvgAggregateOutputType | null
    _sum: AnfitrionSumAggregateOutputType | null
    _min: AnfitrionMinAggregateOutputType | null
    _max: AnfitrionMaxAggregateOutputType | null
  }

  type GetAnfitrionGroupByPayload<T extends AnfitrionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AnfitrionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AnfitrionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AnfitrionGroupByOutputType[P]>
            : GetScalarType<T[P], AnfitrionGroupByOutputType[P]>
        }
      >
    >


  export type AnfitrionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID_Anfitrion?: boolean
    ID_Usuario?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    Reunion?: boolean | Anfitrion$ReunionArgs<ExtArgs>
    _count?: boolean | AnfitrionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["anfitrion"]>

  export type AnfitrionSelectScalar = {
    ID_Anfitrion?: boolean
    ID_Usuario?: boolean
  }


  export type AnfitrionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    Reunion?: boolean | Anfitrion$ReunionArgs<ExtArgs>
    _count?: boolean | AnfitrionCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $AnfitrionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Anfitrion"
    objects: {
      usuario: Prisma.$UsuarioPayload<ExtArgs>
      Reunion: Prisma.$ReunionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      ID_Anfitrion: number
      ID_Usuario: number
    }, ExtArgs["result"]["anfitrion"]>
    composites: {}
  }


  type AnfitrionGetPayload<S extends boolean | null | undefined | AnfitrionDefaultArgs> = $Result.GetResult<Prisma.$AnfitrionPayload, S>

  type AnfitrionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AnfitrionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AnfitrionCountAggregateInputType | true
    }

  export interface AnfitrionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Anfitrion'], meta: { name: 'Anfitrion' } }
    /**
     * Find zero or one Anfitrion that matches the filter.
     * @param {AnfitrionFindUniqueArgs} args - Arguments to find a Anfitrion
     * @example
     * // Get one Anfitrion
     * const anfitrion = await prisma.anfitrion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AnfitrionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AnfitrionFindUniqueArgs<ExtArgs>>
    ): Prisma__AnfitrionClient<$Result.GetResult<Prisma.$AnfitrionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Anfitrion that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AnfitrionFindUniqueOrThrowArgs} args - Arguments to find a Anfitrion
     * @example
     * // Get one Anfitrion
     * const anfitrion = await prisma.anfitrion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AnfitrionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AnfitrionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AnfitrionClient<$Result.GetResult<Prisma.$AnfitrionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Anfitrion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnfitrionFindFirstArgs} args - Arguments to find a Anfitrion
     * @example
     * // Get one Anfitrion
     * const anfitrion = await prisma.anfitrion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AnfitrionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AnfitrionFindFirstArgs<ExtArgs>>
    ): Prisma__AnfitrionClient<$Result.GetResult<Prisma.$AnfitrionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Anfitrion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnfitrionFindFirstOrThrowArgs} args - Arguments to find a Anfitrion
     * @example
     * // Get one Anfitrion
     * const anfitrion = await prisma.anfitrion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AnfitrionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AnfitrionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AnfitrionClient<$Result.GetResult<Prisma.$AnfitrionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Anfitrions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnfitrionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Anfitrions
     * const anfitrions = await prisma.anfitrion.findMany()
     * 
     * // Get first 10 Anfitrions
     * const anfitrions = await prisma.anfitrion.findMany({ take: 10 })
     * 
     * // Only select the `ID_Anfitrion`
     * const anfitrionWithID_AnfitrionOnly = await prisma.anfitrion.findMany({ select: { ID_Anfitrion: true } })
     * 
    **/
    findMany<T extends AnfitrionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AnfitrionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnfitrionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Anfitrion.
     * @param {AnfitrionCreateArgs} args - Arguments to create a Anfitrion.
     * @example
     * // Create one Anfitrion
     * const Anfitrion = await prisma.anfitrion.create({
     *   data: {
     *     // ... data to create a Anfitrion
     *   }
     * })
     * 
    **/
    create<T extends AnfitrionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AnfitrionCreateArgs<ExtArgs>>
    ): Prisma__AnfitrionClient<$Result.GetResult<Prisma.$AnfitrionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Anfitrions.
     *     @param {AnfitrionCreateManyArgs} args - Arguments to create many Anfitrions.
     *     @example
     *     // Create many Anfitrions
     *     const anfitrion = await prisma.anfitrion.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AnfitrionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AnfitrionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Anfitrion.
     * @param {AnfitrionDeleteArgs} args - Arguments to delete one Anfitrion.
     * @example
     * // Delete one Anfitrion
     * const Anfitrion = await prisma.anfitrion.delete({
     *   where: {
     *     // ... filter to delete one Anfitrion
     *   }
     * })
     * 
    **/
    delete<T extends AnfitrionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AnfitrionDeleteArgs<ExtArgs>>
    ): Prisma__AnfitrionClient<$Result.GetResult<Prisma.$AnfitrionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Anfitrion.
     * @param {AnfitrionUpdateArgs} args - Arguments to update one Anfitrion.
     * @example
     * // Update one Anfitrion
     * const anfitrion = await prisma.anfitrion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AnfitrionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AnfitrionUpdateArgs<ExtArgs>>
    ): Prisma__AnfitrionClient<$Result.GetResult<Prisma.$AnfitrionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Anfitrions.
     * @param {AnfitrionDeleteManyArgs} args - Arguments to filter Anfitrions to delete.
     * @example
     * // Delete a few Anfitrions
     * const { count } = await prisma.anfitrion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AnfitrionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AnfitrionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Anfitrions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnfitrionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Anfitrions
     * const anfitrion = await prisma.anfitrion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AnfitrionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AnfitrionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Anfitrion.
     * @param {AnfitrionUpsertArgs} args - Arguments to update or create a Anfitrion.
     * @example
     * // Update or create a Anfitrion
     * const anfitrion = await prisma.anfitrion.upsert({
     *   create: {
     *     // ... data to create a Anfitrion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Anfitrion we want to update
     *   }
     * })
    **/
    upsert<T extends AnfitrionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AnfitrionUpsertArgs<ExtArgs>>
    ): Prisma__AnfitrionClient<$Result.GetResult<Prisma.$AnfitrionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Anfitrions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnfitrionCountArgs} args - Arguments to filter Anfitrions to count.
     * @example
     * // Count the number of Anfitrions
     * const count = await prisma.anfitrion.count({
     *   where: {
     *     // ... the filter for the Anfitrions we want to count
     *   }
     * })
    **/
    count<T extends AnfitrionCountArgs>(
      args?: Subset<T, AnfitrionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AnfitrionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Anfitrion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnfitrionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AnfitrionAggregateArgs>(args: Subset<T, AnfitrionAggregateArgs>): Prisma.PrismaPromise<GetAnfitrionAggregateType<T>>

    /**
     * Group by Anfitrion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnfitrionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AnfitrionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AnfitrionGroupByArgs['orderBy'] }
        : { orderBy?: AnfitrionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AnfitrionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAnfitrionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Anfitrion model
   */
  readonly fields: AnfitrionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Anfitrion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AnfitrionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    usuario<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Reunion<T extends Anfitrion$ReunionArgs<ExtArgs> = {}>(args?: Subset<T, Anfitrion$ReunionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReunionPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Anfitrion model
   */ 
  interface AnfitrionFieldRefs {
    readonly ID_Anfitrion: FieldRef<"Anfitrion", 'Int'>
    readonly ID_Usuario: FieldRef<"Anfitrion", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Anfitrion findUnique
   */
  export type AnfitrionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anfitrion
     */
    select?: AnfitrionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnfitrionInclude<ExtArgs> | null
    /**
     * Filter, which Anfitrion to fetch.
     */
    where: AnfitrionWhereUniqueInput
  }

  /**
   * Anfitrion findUniqueOrThrow
   */
  export type AnfitrionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anfitrion
     */
    select?: AnfitrionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnfitrionInclude<ExtArgs> | null
    /**
     * Filter, which Anfitrion to fetch.
     */
    where: AnfitrionWhereUniqueInput
  }

  /**
   * Anfitrion findFirst
   */
  export type AnfitrionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anfitrion
     */
    select?: AnfitrionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnfitrionInclude<ExtArgs> | null
    /**
     * Filter, which Anfitrion to fetch.
     */
    where?: AnfitrionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Anfitrions to fetch.
     */
    orderBy?: AnfitrionOrderByWithRelationInput | AnfitrionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Anfitrions.
     */
    cursor?: AnfitrionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Anfitrions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Anfitrions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Anfitrions.
     */
    distinct?: AnfitrionScalarFieldEnum | AnfitrionScalarFieldEnum[]
  }

  /**
   * Anfitrion findFirstOrThrow
   */
  export type AnfitrionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anfitrion
     */
    select?: AnfitrionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnfitrionInclude<ExtArgs> | null
    /**
     * Filter, which Anfitrion to fetch.
     */
    where?: AnfitrionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Anfitrions to fetch.
     */
    orderBy?: AnfitrionOrderByWithRelationInput | AnfitrionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Anfitrions.
     */
    cursor?: AnfitrionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Anfitrions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Anfitrions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Anfitrions.
     */
    distinct?: AnfitrionScalarFieldEnum | AnfitrionScalarFieldEnum[]
  }

  /**
   * Anfitrion findMany
   */
  export type AnfitrionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anfitrion
     */
    select?: AnfitrionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnfitrionInclude<ExtArgs> | null
    /**
     * Filter, which Anfitrions to fetch.
     */
    where?: AnfitrionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Anfitrions to fetch.
     */
    orderBy?: AnfitrionOrderByWithRelationInput | AnfitrionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Anfitrions.
     */
    cursor?: AnfitrionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Anfitrions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Anfitrions.
     */
    skip?: number
    distinct?: AnfitrionScalarFieldEnum | AnfitrionScalarFieldEnum[]
  }

  /**
   * Anfitrion create
   */
  export type AnfitrionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anfitrion
     */
    select?: AnfitrionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnfitrionInclude<ExtArgs> | null
    /**
     * The data needed to create a Anfitrion.
     */
    data: XOR<AnfitrionCreateInput, AnfitrionUncheckedCreateInput>
  }

  /**
   * Anfitrion createMany
   */
  export type AnfitrionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Anfitrions.
     */
    data: AnfitrionCreateManyInput | AnfitrionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Anfitrion update
   */
  export type AnfitrionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anfitrion
     */
    select?: AnfitrionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnfitrionInclude<ExtArgs> | null
    /**
     * The data needed to update a Anfitrion.
     */
    data: XOR<AnfitrionUpdateInput, AnfitrionUncheckedUpdateInput>
    /**
     * Choose, which Anfitrion to update.
     */
    where: AnfitrionWhereUniqueInput
  }

  /**
   * Anfitrion updateMany
   */
  export type AnfitrionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Anfitrions.
     */
    data: XOR<AnfitrionUpdateManyMutationInput, AnfitrionUncheckedUpdateManyInput>
    /**
     * Filter which Anfitrions to update
     */
    where?: AnfitrionWhereInput
  }

  /**
   * Anfitrion upsert
   */
  export type AnfitrionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anfitrion
     */
    select?: AnfitrionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnfitrionInclude<ExtArgs> | null
    /**
     * The filter to search for the Anfitrion to update in case it exists.
     */
    where: AnfitrionWhereUniqueInput
    /**
     * In case the Anfitrion found by the `where` argument doesn't exist, create a new Anfitrion with this data.
     */
    create: XOR<AnfitrionCreateInput, AnfitrionUncheckedCreateInput>
    /**
     * In case the Anfitrion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AnfitrionUpdateInput, AnfitrionUncheckedUpdateInput>
  }

  /**
   * Anfitrion delete
   */
  export type AnfitrionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anfitrion
     */
    select?: AnfitrionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnfitrionInclude<ExtArgs> | null
    /**
     * Filter which Anfitrion to delete.
     */
    where: AnfitrionWhereUniqueInput
  }

  /**
   * Anfitrion deleteMany
   */
  export type AnfitrionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Anfitrions to delete
     */
    where?: AnfitrionWhereInput
  }

  /**
   * Anfitrion.Reunion
   */
  export type Anfitrion$ReunionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reunion
     */
    select?: ReunionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReunionInclude<ExtArgs> | null
    where?: ReunionWhereInput
    orderBy?: ReunionOrderByWithRelationInput | ReunionOrderByWithRelationInput[]
    cursor?: ReunionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReunionScalarFieldEnum | ReunionScalarFieldEnum[]
  }

  /**
   * Anfitrion without action
   */
  export type AnfitrionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anfitrion
     */
    select?: AnfitrionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnfitrionInclude<ExtArgs> | null
  }


  /**
   * Model Super_Administrador
   */

  export type AggregateSuper_Administrador = {
    _count: Super_AdministradorCountAggregateOutputType | null
    _avg: Super_AdministradorAvgAggregateOutputType | null
    _sum: Super_AdministradorSumAggregateOutputType | null
    _min: Super_AdministradorMinAggregateOutputType | null
    _max: Super_AdministradorMaxAggregateOutputType | null
  }

  export type Super_AdministradorAvgAggregateOutputType = {
    ID_Super_Administrador: number | null
    ID_Usuario: number | null
  }

  export type Super_AdministradorSumAggregateOutputType = {
    ID_Super_Administrador: number | null
    ID_Usuario: number | null
  }

  export type Super_AdministradorMinAggregateOutputType = {
    ID_Super_Administrador: number | null
    ID_Usuario: number | null
  }

  export type Super_AdministradorMaxAggregateOutputType = {
    ID_Super_Administrador: number | null
    ID_Usuario: number | null
  }

  export type Super_AdministradorCountAggregateOutputType = {
    ID_Super_Administrador: number
    ID_Usuario: number
    _all: number
  }


  export type Super_AdministradorAvgAggregateInputType = {
    ID_Super_Administrador?: true
    ID_Usuario?: true
  }

  export type Super_AdministradorSumAggregateInputType = {
    ID_Super_Administrador?: true
    ID_Usuario?: true
  }

  export type Super_AdministradorMinAggregateInputType = {
    ID_Super_Administrador?: true
    ID_Usuario?: true
  }

  export type Super_AdministradorMaxAggregateInputType = {
    ID_Super_Administrador?: true
    ID_Usuario?: true
  }

  export type Super_AdministradorCountAggregateInputType = {
    ID_Super_Administrador?: true
    ID_Usuario?: true
    _all?: true
  }

  export type Super_AdministradorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Super_Administrador to aggregate.
     */
    where?: Super_AdministradorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Super_Administradors to fetch.
     */
    orderBy?: Super_AdministradorOrderByWithRelationInput | Super_AdministradorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Super_AdministradorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Super_Administradors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Super_Administradors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Super_Administradors
    **/
    _count?: true | Super_AdministradorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Super_AdministradorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Super_AdministradorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Super_AdministradorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Super_AdministradorMaxAggregateInputType
  }

  export type GetSuper_AdministradorAggregateType<T extends Super_AdministradorAggregateArgs> = {
        [P in keyof T & keyof AggregateSuper_Administrador]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSuper_Administrador[P]>
      : GetScalarType<T[P], AggregateSuper_Administrador[P]>
  }




  export type Super_AdministradorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Super_AdministradorWhereInput
    orderBy?: Super_AdministradorOrderByWithAggregationInput | Super_AdministradorOrderByWithAggregationInput[]
    by: Super_AdministradorScalarFieldEnum[] | Super_AdministradorScalarFieldEnum
    having?: Super_AdministradorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Super_AdministradorCountAggregateInputType | true
    _avg?: Super_AdministradorAvgAggregateInputType
    _sum?: Super_AdministradorSumAggregateInputType
    _min?: Super_AdministradorMinAggregateInputType
    _max?: Super_AdministradorMaxAggregateInputType
  }

  export type Super_AdministradorGroupByOutputType = {
    ID_Super_Administrador: number
    ID_Usuario: number
    _count: Super_AdministradorCountAggregateOutputType | null
    _avg: Super_AdministradorAvgAggregateOutputType | null
    _sum: Super_AdministradorSumAggregateOutputType | null
    _min: Super_AdministradorMinAggregateOutputType | null
    _max: Super_AdministradorMaxAggregateOutputType | null
  }

  type GetSuper_AdministradorGroupByPayload<T extends Super_AdministradorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Super_AdministradorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Super_AdministradorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Super_AdministradorGroupByOutputType[P]>
            : GetScalarType<T[P], Super_AdministradorGroupByOutputType[P]>
        }
      >
    >


  export type Super_AdministradorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID_Super_Administrador?: boolean
    ID_Usuario?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["super_Administrador"]>

  export type Super_AdministradorSelectScalar = {
    ID_Super_Administrador?: boolean
    ID_Usuario?: boolean
  }


  export type Super_AdministradorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }


  export type $Super_AdministradorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Super_Administrador"
    objects: {
      usuario: Prisma.$UsuarioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      ID_Super_Administrador: number
      ID_Usuario: number
    }, ExtArgs["result"]["super_Administrador"]>
    composites: {}
  }


  type Super_AdministradorGetPayload<S extends boolean | null | undefined | Super_AdministradorDefaultArgs> = $Result.GetResult<Prisma.$Super_AdministradorPayload, S>

  type Super_AdministradorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<Super_AdministradorFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Super_AdministradorCountAggregateInputType | true
    }

  export interface Super_AdministradorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Super_Administrador'], meta: { name: 'Super_Administrador' } }
    /**
     * Find zero or one Super_Administrador that matches the filter.
     * @param {Super_AdministradorFindUniqueArgs} args - Arguments to find a Super_Administrador
     * @example
     * // Get one Super_Administrador
     * const super_Administrador = await prisma.super_Administrador.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Super_AdministradorFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, Super_AdministradorFindUniqueArgs<ExtArgs>>
    ): Prisma__Super_AdministradorClient<$Result.GetResult<Prisma.$Super_AdministradorPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Super_Administrador that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Super_AdministradorFindUniqueOrThrowArgs} args - Arguments to find a Super_Administrador
     * @example
     * // Get one Super_Administrador
     * const super_Administrador = await prisma.super_Administrador.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Super_AdministradorFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Super_AdministradorFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__Super_AdministradorClient<$Result.GetResult<Prisma.$Super_AdministradorPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Super_Administrador that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Super_AdministradorFindFirstArgs} args - Arguments to find a Super_Administrador
     * @example
     * // Get one Super_Administrador
     * const super_Administrador = await prisma.super_Administrador.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Super_AdministradorFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, Super_AdministradorFindFirstArgs<ExtArgs>>
    ): Prisma__Super_AdministradorClient<$Result.GetResult<Prisma.$Super_AdministradorPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Super_Administrador that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Super_AdministradorFindFirstOrThrowArgs} args - Arguments to find a Super_Administrador
     * @example
     * // Get one Super_Administrador
     * const super_Administrador = await prisma.super_Administrador.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Super_AdministradorFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Super_AdministradorFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__Super_AdministradorClient<$Result.GetResult<Prisma.$Super_AdministradorPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Super_Administradors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Super_AdministradorFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Super_Administradors
     * const super_Administradors = await prisma.super_Administrador.findMany()
     * 
     * // Get first 10 Super_Administradors
     * const super_Administradors = await prisma.super_Administrador.findMany({ take: 10 })
     * 
     * // Only select the `ID_Super_Administrador`
     * const super_AdministradorWithID_Super_AdministradorOnly = await prisma.super_Administrador.findMany({ select: { ID_Super_Administrador: true } })
     * 
    **/
    findMany<T extends Super_AdministradorFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Super_AdministradorFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Super_AdministradorPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Super_Administrador.
     * @param {Super_AdministradorCreateArgs} args - Arguments to create a Super_Administrador.
     * @example
     * // Create one Super_Administrador
     * const Super_Administrador = await prisma.super_Administrador.create({
     *   data: {
     *     // ... data to create a Super_Administrador
     *   }
     * })
     * 
    **/
    create<T extends Super_AdministradorCreateArgs<ExtArgs>>(
      args: SelectSubset<T, Super_AdministradorCreateArgs<ExtArgs>>
    ): Prisma__Super_AdministradorClient<$Result.GetResult<Prisma.$Super_AdministradorPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Super_Administradors.
     *     @param {Super_AdministradorCreateManyArgs} args - Arguments to create many Super_Administradors.
     *     @example
     *     // Create many Super_Administradors
     *     const super_Administrador = await prisma.super_Administrador.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Super_AdministradorCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Super_AdministradorCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Super_Administrador.
     * @param {Super_AdministradorDeleteArgs} args - Arguments to delete one Super_Administrador.
     * @example
     * // Delete one Super_Administrador
     * const Super_Administrador = await prisma.super_Administrador.delete({
     *   where: {
     *     // ... filter to delete one Super_Administrador
     *   }
     * })
     * 
    **/
    delete<T extends Super_AdministradorDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, Super_AdministradorDeleteArgs<ExtArgs>>
    ): Prisma__Super_AdministradorClient<$Result.GetResult<Prisma.$Super_AdministradorPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Super_Administrador.
     * @param {Super_AdministradorUpdateArgs} args - Arguments to update one Super_Administrador.
     * @example
     * // Update one Super_Administrador
     * const super_Administrador = await prisma.super_Administrador.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Super_AdministradorUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, Super_AdministradorUpdateArgs<ExtArgs>>
    ): Prisma__Super_AdministradorClient<$Result.GetResult<Prisma.$Super_AdministradorPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Super_Administradors.
     * @param {Super_AdministradorDeleteManyArgs} args - Arguments to filter Super_Administradors to delete.
     * @example
     * // Delete a few Super_Administradors
     * const { count } = await prisma.super_Administrador.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Super_AdministradorDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Super_AdministradorDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Super_Administradors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Super_AdministradorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Super_Administradors
     * const super_Administrador = await prisma.super_Administrador.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Super_AdministradorUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, Super_AdministradorUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Super_Administrador.
     * @param {Super_AdministradorUpsertArgs} args - Arguments to update or create a Super_Administrador.
     * @example
     * // Update or create a Super_Administrador
     * const super_Administrador = await prisma.super_Administrador.upsert({
     *   create: {
     *     // ... data to create a Super_Administrador
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Super_Administrador we want to update
     *   }
     * })
    **/
    upsert<T extends Super_AdministradorUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, Super_AdministradorUpsertArgs<ExtArgs>>
    ): Prisma__Super_AdministradorClient<$Result.GetResult<Prisma.$Super_AdministradorPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Super_Administradors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Super_AdministradorCountArgs} args - Arguments to filter Super_Administradors to count.
     * @example
     * // Count the number of Super_Administradors
     * const count = await prisma.super_Administrador.count({
     *   where: {
     *     // ... the filter for the Super_Administradors we want to count
     *   }
     * })
    **/
    count<T extends Super_AdministradorCountArgs>(
      args?: Subset<T, Super_AdministradorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Super_AdministradorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Super_Administrador.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Super_AdministradorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Super_AdministradorAggregateArgs>(args: Subset<T, Super_AdministradorAggregateArgs>): Prisma.PrismaPromise<GetSuper_AdministradorAggregateType<T>>

    /**
     * Group by Super_Administrador.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Super_AdministradorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Super_AdministradorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Super_AdministradorGroupByArgs['orderBy'] }
        : { orderBy?: Super_AdministradorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Super_AdministradorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSuper_AdministradorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Super_Administrador model
   */
  readonly fields: Super_AdministradorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Super_Administrador.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Super_AdministradorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    usuario<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Super_Administrador model
   */ 
  interface Super_AdministradorFieldRefs {
    readonly ID_Super_Administrador: FieldRef<"Super_Administrador", 'Int'>
    readonly ID_Usuario: FieldRef<"Super_Administrador", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Super_Administrador findUnique
   */
  export type Super_AdministradorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Super_Administrador
     */
    select?: Super_AdministradorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Super_AdministradorInclude<ExtArgs> | null
    /**
     * Filter, which Super_Administrador to fetch.
     */
    where: Super_AdministradorWhereUniqueInput
  }

  /**
   * Super_Administrador findUniqueOrThrow
   */
  export type Super_AdministradorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Super_Administrador
     */
    select?: Super_AdministradorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Super_AdministradorInclude<ExtArgs> | null
    /**
     * Filter, which Super_Administrador to fetch.
     */
    where: Super_AdministradorWhereUniqueInput
  }

  /**
   * Super_Administrador findFirst
   */
  export type Super_AdministradorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Super_Administrador
     */
    select?: Super_AdministradorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Super_AdministradorInclude<ExtArgs> | null
    /**
     * Filter, which Super_Administrador to fetch.
     */
    where?: Super_AdministradorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Super_Administradors to fetch.
     */
    orderBy?: Super_AdministradorOrderByWithRelationInput | Super_AdministradorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Super_Administradors.
     */
    cursor?: Super_AdministradorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Super_Administradors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Super_Administradors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Super_Administradors.
     */
    distinct?: Super_AdministradorScalarFieldEnum | Super_AdministradorScalarFieldEnum[]
  }

  /**
   * Super_Administrador findFirstOrThrow
   */
  export type Super_AdministradorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Super_Administrador
     */
    select?: Super_AdministradorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Super_AdministradorInclude<ExtArgs> | null
    /**
     * Filter, which Super_Administrador to fetch.
     */
    where?: Super_AdministradorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Super_Administradors to fetch.
     */
    orderBy?: Super_AdministradorOrderByWithRelationInput | Super_AdministradorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Super_Administradors.
     */
    cursor?: Super_AdministradorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Super_Administradors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Super_Administradors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Super_Administradors.
     */
    distinct?: Super_AdministradorScalarFieldEnum | Super_AdministradorScalarFieldEnum[]
  }

  /**
   * Super_Administrador findMany
   */
  export type Super_AdministradorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Super_Administrador
     */
    select?: Super_AdministradorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Super_AdministradorInclude<ExtArgs> | null
    /**
     * Filter, which Super_Administradors to fetch.
     */
    where?: Super_AdministradorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Super_Administradors to fetch.
     */
    orderBy?: Super_AdministradorOrderByWithRelationInput | Super_AdministradorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Super_Administradors.
     */
    cursor?: Super_AdministradorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Super_Administradors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Super_Administradors.
     */
    skip?: number
    distinct?: Super_AdministradorScalarFieldEnum | Super_AdministradorScalarFieldEnum[]
  }

  /**
   * Super_Administrador create
   */
  export type Super_AdministradorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Super_Administrador
     */
    select?: Super_AdministradorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Super_AdministradorInclude<ExtArgs> | null
    /**
     * The data needed to create a Super_Administrador.
     */
    data: XOR<Super_AdministradorCreateInput, Super_AdministradorUncheckedCreateInput>
  }

  /**
   * Super_Administrador createMany
   */
  export type Super_AdministradorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Super_Administradors.
     */
    data: Super_AdministradorCreateManyInput | Super_AdministradorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Super_Administrador update
   */
  export type Super_AdministradorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Super_Administrador
     */
    select?: Super_AdministradorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Super_AdministradorInclude<ExtArgs> | null
    /**
     * The data needed to update a Super_Administrador.
     */
    data: XOR<Super_AdministradorUpdateInput, Super_AdministradorUncheckedUpdateInput>
    /**
     * Choose, which Super_Administrador to update.
     */
    where: Super_AdministradorWhereUniqueInput
  }

  /**
   * Super_Administrador updateMany
   */
  export type Super_AdministradorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Super_Administradors.
     */
    data: XOR<Super_AdministradorUpdateManyMutationInput, Super_AdministradorUncheckedUpdateManyInput>
    /**
     * Filter which Super_Administradors to update
     */
    where?: Super_AdministradorWhereInput
  }

  /**
   * Super_Administrador upsert
   */
  export type Super_AdministradorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Super_Administrador
     */
    select?: Super_AdministradorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Super_AdministradorInclude<ExtArgs> | null
    /**
     * The filter to search for the Super_Administrador to update in case it exists.
     */
    where: Super_AdministradorWhereUniqueInput
    /**
     * In case the Super_Administrador found by the `where` argument doesn't exist, create a new Super_Administrador with this data.
     */
    create: XOR<Super_AdministradorCreateInput, Super_AdministradorUncheckedCreateInput>
    /**
     * In case the Super_Administrador was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Super_AdministradorUpdateInput, Super_AdministradorUncheckedUpdateInput>
  }

  /**
   * Super_Administrador delete
   */
  export type Super_AdministradorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Super_Administrador
     */
    select?: Super_AdministradorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Super_AdministradorInclude<ExtArgs> | null
    /**
     * Filter which Super_Administrador to delete.
     */
    where: Super_AdministradorWhereUniqueInput
  }

  /**
   * Super_Administrador deleteMany
   */
  export type Super_AdministradorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Super_Administradors to delete
     */
    where?: Super_AdministradorWhereInput
  }

  /**
   * Super_Administrador without action
   */
  export type Super_AdministradorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Super_Administrador
     */
    select?: Super_AdministradorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Super_AdministradorInclude<ExtArgs> | null
  }


  /**
   * Model Sala
   */

  export type AggregateSala = {
    _count: SalaCountAggregateOutputType | null
    _avg: SalaAvgAggregateOutputType | null
    _sum: SalaSumAggregateOutputType | null
    _min: SalaMinAggregateOutputType | null
    _max: SalaMaxAggregateOutputType | null
  }

  export type SalaAvgAggregateOutputType = {
    ID_Sala: number | null
    Capacidad: number | null
    Piso: number | null
  }

  export type SalaSumAggregateOutputType = {
    ID_Sala: number | null
    Capacidad: number | null
    Piso: number | null
  }

  export type SalaMinAggregateOutputType = {
    ID_Sala: number | null
    Nombre_Sala: string | null
    Capacidad: number | null
    Piso: number | null
  }

  export type SalaMaxAggregateOutputType = {
    ID_Sala: number | null
    Nombre_Sala: string | null
    Capacidad: number | null
    Piso: number | null
  }

  export type SalaCountAggregateOutputType = {
    ID_Sala: number
    Nombre_Sala: number
    Capacidad: number
    Piso: number
    _all: number
  }


  export type SalaAvgAggregateInputType = {
    ID_Sala?: true
    Capacidad?: true
    Piso?: true
  }

  export type SalaSumAggregateInputType = {
    ID_Sala?: true
    Capacidad?: true
    Piso?: true
  }

  export type SalaMinAggregateInputType = {
    ID_Sala?: true
    Nombre_Sala?: true
    Capacidad?: true
    Piso?: true
  }

  export type SalaMaxAggregateInputType = {
    ID_Sala?: true
    Nombre_Sala?: true
    Capacidad?: true
    Piso?: true
  }

  export type SalaCountAggregateInputType = {
    ID_Sala?: true
    Nombre_Sala?: true
    Capacidad?: true
    Piso?: true
    _all?: true
  }

  export type SalaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sala to aggregate.
     */
    where?: SalaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Salas to fetch.
     */
    orderBy?: SalaOrderByWithRelationInput | SalaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SalaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Salas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Salas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Salas
    **/
    _count?: true | SalaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SalaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SalaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SalaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SalaMaxAggregateInputType
  }

  export type GetSalaAggregateType<T extends SalaAggregateArgs> = {
        [P in keyof T & keyof AggregateSala]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSala[P]>
      : GetScalarType<T[P], AggregateSala[P]>
  }




  export type SalaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SalaWhereInput
    orderBy?: SalaOrderByWithAggregationInput | SalaOrderByWithAggregationInput[]
    by: SalaScalarFieldEnum[] | SalaScalarFieldEnum
    having?: SalaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SalaCountAggregateInputType | true
    _avg?: SalaAvgAggregateInputType
    _sum?: SalaSumAggregateInputType
    _min?: SalaMinAggregateInputType
    _max?: SalaMaxAggregateInputType
  }

  export type SalaGroupByOutputType = {
    ID_Sala: number
    Nombre_Sala: string
    Capacidad: number
    Piso: number
    _count: SalaCountAggregateOutputType | null
    _avg: SalaAvgAggregateOutputType | null
    _sum: SalaSumAggregateOutputType | null
    _min: SalaMinAggregateOutputType | null
    _max: SalaMaxAggregateOutputType | null
  }

  type GetSalaGroupByPayload<T extends SalaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SalaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SalaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SalaGroupByOutputType[P]>
            : GetScalarType<T[P], SalaGroupByOutputType[P]>
        }
      >
    >


  export type SalaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID_Sala?: boolean
    Nombre_Sala?: boolean
    Capacidad?: boolean
    Piso?: boolean
    Reunion?: boolean | Sala$ReunionArgs<ExtArgs>
    _count?: boolean | SalaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sala"]>

  export type SalaSelectScalar = {
    ID_Sala?: boolean
    Nombre_Sala?: boolean
    Capacidad?: boolean
    Piso?: boolean
  }


  export type SalaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Reunion?: boolean | Sala$ReunionArgs<ExtArgs>
    _count?: boolean | SalaCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $SalaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Sala"
    objects: {
      Reunion: Prisma.$ReunionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      ID_Sala: number
      Nombre_Sala: string
      Capacidad: number
      Piso: number
    }, ExtArgs["result"]["sala"]>
    composites: {}
  }


  type SalaGetPayload<S extends boolean | null | undefined | SalaDefaultArgs> = $Result.GetResult<Prisma.$SalaPayload, S>

  type SalaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SalaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SalaCountAggregateInputType | true
    }

  export interface SalaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Sala'], meta: { name: 'Sala' } }
    /**
     * Find zero or one Sala that matches the filter.
     * @param {SalaFindUniqueArgs} args - Arguments to find a Sala
     * @example
     * // Get one Sala
     * const sala = await prisma.sala.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SalaFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SalaFindUniqueArgs<ExtArgs>>
    ): Prisma__SalaClient<$Result.GetResult<Prisma.$SalaPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Sala that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SalaFindUniqueOrThrowArgs} args - Arguments to find a Sala
     * @example
     * // Get one Sala
     * const sala = await prisma.sala.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SalaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SalaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SalaClient<$Result.GetResult<Prisma.$SalaPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Sala that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaFindFirstArgs} args - Arguments to find a Sala
     * @example
     * // Get one Sala
     * const sala = await prisma.sala.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SalaFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SalaFindFirstArgs<ExtArgs>>
    ): Prisma__SalaClient<$Result.GetResult<Prisma.$SalaPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Sala that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaFindFirstOrThrowArgs} args - Arguments to find a Sala
     * @example
     * // Get one Sala
     * const sala = await prisma.sala.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SalaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SalaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SalaClient<$Result.GetResult<Prisma.$SalaPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Salas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Salas
     * const salas = await prisma.sala.findMany()
     * 
     * // Get first 10 Salas
     * const salas = await prisma.sala.findMany({ take: 10 })
     * 
     * // Only select the `ID_Sala`
     * const salaWithID_SalaOnly = await prisma.sala.findMany({ select: { ID_Sala: true } })
     * 
    **/
    findMany<T extends SalaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SalaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SalaPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Sala.
     * @param {SalaCreateArgs} args - Arguments to create a Sala.
     * @example
     * // Create one Sala
     * const Sala = await prisma.sala.create({
     *   data: {
     *     // ... data to create a Sala
     *   }
     * })
     * 
    **/
    create<T extends SalaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SalaCreateArgs<ExtArgs>>
    ): Prisma__SalaClient<$Result.GetResult<Prisma.$SalaPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Salas.
     *     @param {SalaCreateManyArgs} args - Arguments to create many Salas.
     *     @example
     *     // Create many Salas
     *     const sala = await prisma.sala.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SalaCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SalaCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Sala.
     * @param {SalaDeleteArgs} args - Arguments to delete one Sala.
     * @example
     * // Delete one Sala
     * const Sala = await prisma.sala.delete({
     *   where: {
     *     // ... filter to delete one Sala
     *   }
     * })
     * 
    **/
    delete<T extends SalaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SalaDeleteArgs<ExtArgs>>
    ): Prisma__SalaClient<$Result.GetResult<Prisma.$SalaPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Sala.
     * @param {SalaUpdateArgs} args - Arguments to update one Sala.
     * @example
     * // Update one Sala
     * const sala = await prisma.sala.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SalaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SalaUpdateArgs<ExtArgs>>
    ): Prisma__SalaClient<$Result.GetResult<Prisma.$SalaPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Salas.
     * @param {SalaDeleteManyArgs} args - Arguments to filter Salas to delete.
     * @example
     * // Delete a few Salas
     * const { count } = await prisma.sala.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SalaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SalaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Salas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Salas
     * const sala = await prisma.sala.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SalaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SalaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Sala.
     * @param {SalaUpsertArgs} args - Arguments to update or create a Sala.
     * @example
     * // Update or create a Sala
     * const sala = await prisma.sala.upsert({
     *   create: {
     *     // ... data to create a Sala
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sala we want to update
     *   }
     * })
    **/
    upsert<T extends SalaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SalaUpsertArgs<ExtArgs>>
    ): Prisma__SalaClient<$Result.GetResult<Prisma.$SalaPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Salas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaCountArgs} args - Arguments to filter Salas to count.
     * @example
     * // Count the number of Salas
     * const count = await prisma.sala.count({
     *   where: {
     *     // ... the filter for the Salas we want to count
     *   }
     * })
    **/
    count<T extends SalaCountArgs>(
      args?: Subset<T, SalaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SalaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sala.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SalaAggregateArgs>(args: Subset<T, SalaAggregateArgs>): Prisma.PrismaPromise<GetSalaAggregateType<T>>

    /**
     * Group by Sala.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SalaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SalaGroupByArgs['orderBy'] }
        : { orderBy?: SalaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SalaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSalaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Sala model
   */
  readonly fields: SalaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Sala.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SalaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Reunion<T extends Sala$ReunionArgs<ExtArgs> = {}>(args?: Subset<T, Sala$ReunionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReunionPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Sala model
   */ 
  interface SalaFieldRefs {
    readonly ID_Sala: FieldRef<"Sala", 'Int'>
    readonly Nombre_Sala: FieldRef<"Sala", 'String'>
    readonly Capacidad: FieldRef<"Sala", 'Int'>
    readonly Piso: FieldRef<"Sala", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Sala findUnique
   */
  export type SalaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sala
     */
    select?: SalaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaInclude<ExtArgs> | null
    /**
     * Filter, which Sala to fetch.
     */
    where: SalaWhereUniqueInput
  }

  /**
   * Sala findUniqueOrThrow
   */
  export type SalaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sala
     */
    select?: SalaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaInclude<ExtArgs> | null
    /**
     * Filter, which Sala to fetch.
     */
    where: SalaWhereUniqueInput
  }

  /**
   * Sala findFirst
   */
  export type SalaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sala
     */
    select?: SalaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaInclude<ExtArgs> | null
    /**
     * Filter, which Sala to fetch.
     */
    where?: SalaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Salas to fetch.
     */
    orderBy?: SalaOrderByWithRelationInput | SalaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Salas.
     */
    cursor?: SalaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Salas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Salas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Salas.
     */
    distinct?: SalaScalarFieldEnum | SalaScalarFieldEnum[]
  }

  /**
   * Sala findFirstOrThrow
   */
  export type SalaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sala
     */
    select?: SalaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaInclude<ExtArgs> | null
    /**
     * Filter, which Sala to fetch.
     */
    where?: SalaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Salas to fetch.
     */
    orderBy?: SalaOrderByWithRelationInput | SalaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Salas.
     */
    cursor?: SalaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Salas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Salas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Salas.
     */
    distinct?: SalaScalarFieldEnum | SalaScalarFieldEnum[]
  }

  /**
   * Sala findMany
   */
  export type SalaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sala
     */
    select?: SalaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaInclude<ExtArgs> | null
    /**
     * Filter, which Salas to fetch.
     */
    where?: SalaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Salas to fetch.
     */
    orderBy?: SalaOrderByWithRelationInput | SalaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Salas.
     */
    cursor?: SalaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Salas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Salas.
     */
    skip?: number
    distinct?: SalaScalarFieldEnum | SalaScalarFieldEnum[]
  }

  /**
   * Sala create
   */
  export type SalaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sala
     */
    select?: SalaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaInclude<ExtArgs> | null
    /**
     * The data needed to create a Sala.
     */
    data: XOR<SalaCreateInput, SalaUncheckedCreateInput>
  }

  /**
   * Sala createMany
   */
  export type SalaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Salas.
     */
    data: SalaCreateManyInput | SalaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Sala update
   */
  export type SalaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sala
     */
    select?: SalaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaInclude<ExtArgs> | null
    /**
     * The data needed to update a Sala.
     */
    data: XOR<SalaUpdateInput, SalaUncheckedUpdateInput>
    /**
     * Choose, which Sala to update.
     */
    where: SalaWhereUniqueInput
  }

  /**
   * Sala updateMany
   */
  export type SalaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Salas.
     */
    data: XOR<SalaUpdateManyMutationInput, SalaUncheckedUpdateManyInput>
    /**
     * Filter which Salas to update
     */
    where?: SalaWhereInput
  }

  /**
   * Sala upsert
   */
  export type SalaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sala
     */
    select?: SalaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaInclude<ExtArgs> | null
    /**
     * The filter to search for the Sala to update in case it exists.
     */
    where: SalaWhereUniqueInput
    /**
     * In case the Sala found by the `where` argument doesn't exist, create a new Sala with this data.
     */
    create: XOR<SalaCreateInput, SalaUncheckedCreateInput>
    /**
     * In case the Sala was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SalaUpdateInput, SalaUncheckedUpdateInput>
  }

  /**
   * Sala delete
   */
  export type SalaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sala
     */
    select?: SalaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaInclude<ExtArgs> | null
    /**
     * Filter which Sala to delete.
     */
    where: SalaWhereUniqueInput
  }

  /**
   * Sala deleteMany
   */
  export type SalaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Salas to delete
     */
    where?: SalaWhereInput
  }

  /**
   * Sala.Reunion
   */
  export type Sala$ReunionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reunion
     */
    select?: ReunionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReunionInclude<ExtArgs> | null
    where?: ReunionWhereInput
    orderBy?: ReunionOrderByWithRelationInput | ReunionOrderByWithRelationInput[]
    cursor?: ReunionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReunionScalarFieldEnum | ReunionScalarFieldEnum[]
  }

  /**
   * Sala without action
   */
  export type SalaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sala
     */
    select?: SalaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaInclude<ExtArgs> | null
  }


  /**
   * Model Reunion
   */

  export type AggregateReunion = {
    _count: ReunionCountAggregateOutputType | null
    _avg: ReunionAvgAggregateOutputType | null
    _sum: ReunionSumAggregateOutputType | null
    _min: ReunionMinAggregateOutputType | null
    _max: ReunionMaxAggregateOutputType | null
  }

  export type ReunionAvgAggregateOutputType = {
    ID_Reunion: number | null
    ID_Sala: number | null
    ID_Anfitrion: number | null
  }

  export type ReunionSumAggregateOutputType = {
    ID_Reunion: number | null
    ID_Sala: number | null
    ID_Anfitrion: number | null
  }

  export type ReunionMinAggregateOutputType = {
    ID_Reunion: number | null
    Titulo: string | null
    Fecha_Reunion: string | null
    Hora_Reunion: string | null
    Descripcion: string | null
    ID_Sala: number | null
    ID_Anfitrion: number | null
  }

  export type ReunionMaxAggregateOutputType = {
    ID_Reunion: number | null
    Titulo: string | null
    Fecha_Reunion: string | null
    Hora_Reunion: string | null
    Descripcion: string | null
    ID_Sala: number | null
    ID_Anfitrion: number | null
  }

  export type ReunionCountAggregateOutputType = {
    ID_Reunion: number
    Titulo: number
    Fecha_Reunion: number
    Hora_Reunion: number
    Descripcion: number
    ID_Sala: number
    ID_Anfitrion: number
    _all: number
  }


  export type ReunionAvgAggregateInputType = {
    ID_Reunion?: true
    ID_Sala?: true
    ID_Anfitrion?: true
  }

  export type ReunionSumAggregateInputType = {
    ID_Reunion?: true
    ID_Sala?: true
    ID_Anfitrion?: true
  }

  export type ReunionMinAggregateInputType = {
    ID_Reunion?: true
    Titulo?: true
    Fecha_Reunion?: true
    Hora_Reunion?: true
    Descripcion?: true
    ID_Sala?: true
    ID_Anfitrion?: true
  }

  export type ReunionMaxAggregateInputType = {
    ID_Reunion?: true
    Titulo?: true
    Fecha_Reunion?: true
    Hora_Reunion?: true
    Descripcion?: true
    ID_Sala?: true
    ID_Anfitrion?: true
  }

  export type ReunionCountAggregateInputType = {
    ID_Reunion?: true
    Titulo?: true
    Fecha_Reunion?: true
    Hora_Reunion?: true
    Descripcion?: true
    ID_Sala?: true
    ID_Anfitrion?: true
    _all?: true
  }

  export type ReunionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reunion to aggregate.
     */
    where?: ReunionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reunions to fetch.
     */
    orderBy?: ReunionOrderByWithRelationInput | ReunionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReunionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reunions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reunions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reunions
    **/
    _count?: true | ReunionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReunionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReunionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReunionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReunionMaxAggregateInputType
  }

  export type GetReunionAggregateType<T extends ReunionAggregateArgs> = {
        [P in keyof T & keyof AggregateReunion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReunion[P]>
      : GetScalarType<T[P], AggregateReunion[P]>
  }




  export type ReunionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReunionWhereInput
    orderBy?: ReunionOrderByWithAggregationInput | ReunionOrderByWithAggregationInput[]
    by: ReunionScalarFieldEnum[] | ReunionScalarFieldEnum
    having?: ReunionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReunionCountAggregateInputType | true
    _avg?: ReunionAvgAggregateInputType
    _sum?: ReunionSumAggregateInputType
    _min?: ReunionMinAggregateInputType
    _max?: ReunionMaxAggregateInputType
  }

  export type ReunionGroupByOutputType = {
    ID_Reunion: number
    Titulo: string
    Fecha_Reunion: string
    Hora_Reunion: string
    Descripcion: string
    ID_Sala: number
    ID_Anfitrion: number
    _count: ReunionCountAggregateOutputType | null
    _avg: ReunionAvgAggregateOutputType | null
    _sum: ReunionSumAggregateOutputType | null
    _min: ReunionMinAggregateOutputType | null
    _max: ReunionMaxAggregateOutputType | null
  }

  type GetReunionGroupByPayload<T extends ReunionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReunionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReunionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReunionGroupByOutputType[P]>
            : GetScalarType<T[P], ReunionGroupByOutputType[P]>
        }
      >
    >


  export type ReunionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID_Reunion?: boolean
    Titulo?: boolean
    Fecha_Reunion?: boolean
    Hora_Reunion?: boolean
    Descripcion?: boolean
    ID_Sala?: boolean
    ID_Anfitrion?: boolean
    sala?: boolean | SalaDefaultArgs<ExtArgs>
    anfitrion?: boolean | AnfitrionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reunion"]>

  export type ReunionSelectScalar = {
    ID_Reunion?: boolean
    Titulo?: boolean
    Fecha_Reunion?: boolean
    Hora_Reunion?: boolean
    Descripcion?: boolean
    ID_Sala?: boolean
    ID_Anfitrion?: boolean
  }


  export type ReunionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sala?: boolean | SalaDefaultArgs<ExtArgs>
    anfitrion?: boolean | AnfitrionDefaultArgs<ExtArgs>
  }


  export type $ReunionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Reunion"
    objects: {
      sala: Prisma.$SalaPayload<ExtArgs>
      anfitrion: Prisma.$AnfitrionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      ID_Reunion: number
      Titulo: string
      Fecha_Reunion: string
      Hora_Reunion: string
      Descripcion: string
      ID_Sala: number
      ID_Anfitrion: number
    }, ExtArgs["result"]["reunion"]>
    composites: {}
  }


  type ReunionGetPayload<S extends boolean | null | undefined | ReunionDefaultArgs> = $Result.GetResult<Prisma.$ReunionPayload, S>

  type ReunionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ReunionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ReunionCountAggregateInputType | true
    }

  export interface ReunionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Reunion'], meta: { name: 'Reunion' } }
    /**
     * Find zero or one Reunion that matches the filter.
     * @param {ReunionFindUniqueArgs} args - Arguments to find a Reunion
     * @example
     * // Get one Reunion
     * const reunion = await prisma.reunion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ReunionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ReunionFindUniqueArgs<ExtArgs>>
    ): Prisma__ReunionClient<$Result.GetResult<Prisma.$ReunionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Reunion that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ReunionFindUniqueOrThrowArgs} args - Arguments to find a Reunion
     * @example
     * // Get one Reunion
     * const reunion = await prisma.reunion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ReunionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ReunionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ReunionClient<$Result.GetResult<Prisma.$ReunionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Reunion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReunionFindFirstArgs} args - Arguments to find a Reunion
     * @example
     * // Get one Reunion
     * const reunion = await prisma.reunion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ReunionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ReunionFindFirstArgs<ExtArgs>>
    ): Prisma__ReunionClient<$Result.GetResult<Prisma.$ReunionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Reunion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReunionFindFirstOrThrowArgs} args - Arguments to find a Reunion
     * @example
     * // Get one Reunion
     * const reunion = await prisma.reunion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ReunionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ReunionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ReunionClient<$Result.GetResult<Prisma.$ReunionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Reunions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReunionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reunions
     * const reunions = await prisma.reunion.findMany()
     * 
     * // Get first 10 Reunions
     * const reunions = await prisma.reunion.findMany({ take: 10 })
     * 
     * // Only select the `ID_Reunion`
     * const reunionWithID_ReunionOnly = await prisma.reunion.findMany({ select: { ID_Reunion: true } })
     * 
    **/
    findMany<T extends ReunionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReunionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReunionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Reunion.
     * @param {ReunionCreateArgs} args - Arguments to create a Reunion.
     * @example
     * // Create one Reunion
     * const Reunion = await prisma.reunion.create({
     *   data: {
     *     // ... data to create a Reunion
     *   }
     * })
     * 
    **/
    create<T extends ReunionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ReunionCreateArgs<ExtArgs>>
    ): Prisma__ReunionClient<$Result.GetResult<Prisma.$ReunionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Reunions.
     *     @param {ReunionCreateManyArgs} args - Arguments to create many Reunions.
     *     @example
     *     // Create many Reunions
     *     const reunion = await prisma.reunion.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ReunionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReunionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Reunion.
     * @param {ReunionDeleteArgs} args - Arguments to delete one Reunion.
     * @example
     * // Delete one Reunion
     * const Reunion = await prisma.reunion.delete({
     *   where: {
     *     // ... filter to delete one Reunion
     *   }
     * })
     * 
    **/
    delete<T extends ReunionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ReunionDeleteArgs<ExtArgs>>
    ): Prisma__ReunionClient<$Result.GetResult<Prisma.$ReunionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Reunion.
     * @param {ReunionUpdateArgs} args - Arguments to update one Reunion.
     * @example
     * // Update one Reunion
     * const reunion = await prisma.reunion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ReunionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ReunionUpdateArgs<ExtArgs>>
    ): Prisma__ReunionClient<$Result.GetResult<Prisma.$ReunionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Reunions.
     * @param {ReunionDeleteManyArgs} args - Arguments to filter Reunions to delete.
     * @example
     * // Delete a few Reunions
     * const { count } = await prisma.reunion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ReunionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReunionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reunions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReunionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reunions
     * const reunion = await prisma.reunion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ReunionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ReunionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Reunion.
     * @param {ReunionUpsertArgs} args - Arguments to update or create a Reunion.
     * @example
     * // Update or create a Reunion
     * const reunion = await prisma.reunion.upsert({
     *   create: {
     *     // ... data to create a Reunion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Reunion we want to update
     *   }
     * })
    **/
    upsert<T extends ReunionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ReunionUpsertArgs<ExtArgs>>
    ): Prisma__ReunionClient<$Result.GetResult<Prisma.$ReunionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Reunions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReunionCountArgs} args - Arguments to filter Reunions to count.
     * @example
     * // Count the number of Reunions
     * const count = await prisma.reunion.count({
     *   where: {
     *     // ... the filter for the Reunions we want to count
     *   }
     * })
    **/
    count<T extends ReunionCountArgs>(
      args?: Subset<T, ReunionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReunionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Reunion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReunionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReunionAggregateArgs>(args: Subset<T, ReunionAggregateArgs>): Prisma.PrismaPromise<GetReunionAggregateType<T>>

    /**
     * Group by Reunion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReunionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReunionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReunionGroupByArgs['orderBy'] }
        : { orderBy?: ReunionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReunionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReunionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Reunion model
   */
  readonly fields: ReunionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Reunion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReunionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    sala<T extends SalaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SalaDefaultArgs<ExtArgs>>): Prisma__SalaClient<$Result.GetResult<Prisma.$SalaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    anfitrion<T extends AnfitrionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AnfitrionDefaultArgs<ExtArgs>>): Prisma__AnfitrionClient<$Result.GetResult<Prisma.$AnfitrionPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Reunion model
   */ 
  interface ReunionFieldRefs {
    readonly ID_Reunion: FieldRef<"Reunion", 'Int'>
    readonly Titulo: FieldRef<"Reunion", 'String'>
    readonly Fecha_Reunion: FieldRef<"Reunion", 'String'>
    readonly Hora_Reunion: FieldRef<"Reunion", 'String'>
    readonly Descripcion: FieldRef<"Reunion", 'String'>
    readonly ID_Sala: FieldRef<"Reunion", 'Int'>
    readonly ID_Anfitrion: FieldRef<"Reunion", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Reunion findUnique
   */
  export type ReunionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reunion
     */
    select?: ReunionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReunionInclude<ExtArgs> | null
    /**
     * Filter, which Reunion to fetch.
     */
    where: ReunionWhereUniqueInput
  }

  /**
   * Reunion findUniqueOrThrow
   */
  export type ReunionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reunion
     */
    select?: ReunionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReunionInclude<ExtArgs> | null
    /**
     * Filter, which Reunion to fetch.
     */
    where: ReunionWhereUniqueInput
  }

  /**
   * Reunion findFirst
   */
  export type ReunionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reunion
     */
    select?: ReunionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReunionInclude<ExtArgs> | null
    /**
     * Filter, which Reunion to fetch.
     */
    where?: ReunionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reunions to fetch.
     */
    orderBy?: ReunionOrderByWithRelationInput | ReunionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reunions.
     */
    cursor?: ReunionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reunions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reunions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reunions.
     */
    distinct?: ReunionScalarFieldEnum | ReunionScalarFieldEnum[]
  }

  /**
   * Reunion findFirstOrThrow
   */
  export type ReunionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reunion
     */
    select?: ReunionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReunionInclude<ExtArgs> | null
    /**
     * Filter, which Reunion to fetch.
     */
    where?: ReunionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reunions to fetch.
     */
    orderBy?: ReunionOrderByWithRelationInput | ReunionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reunions.
     */
    cursor?: ReunionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reunions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reunions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reunions.
     */
    distinct?: ReunionScalarFieldEnum | ReunionScalarFieldEnum[]
  }

  /**
   * Reunion findMany
   */
  export type ReunionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reunion
     */
    select?: ReunionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReunionInclude<ExtArgs> | null
    /**
     * Filter, which Reunions to fetch.
     */
    where?: ReunionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reunions to fetch.
     */
    orderBy?: ReunionOrderByWithRelationInput | ReunionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reunions.
     */
    cursor?: ReunionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reunions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reunions.
     */
    skip?: number
    distinct?: ReunionScalarFieldEnum | ReunionScalarFieldEnum[]
  }

  /**
   * Reunion create
   */
  export type ReunionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reunion
     */
    select?: ReunionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReunionInclude<ExtArgs> | null
    /**
     * The data needed to create a Reunion.
     */
    data: XOR<ReunionCreateInput, ReunionUncheckedCreateInput>
  }

  /**
   * Reunion createMany
   */
  export type ReunionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Reunions.
     */
    data: ReunionCreateManyInput | ReunionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Reunion update
   */
  export type ReunionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reunion
     */
    select?: ReunionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReunionInclude<ExtArgs> | null
    /**
     * The data needed to update a Reunion.
     */
    data: XOR<ReunionUpdateInput, ReunionUncheckedUpdateInput>
    /**
     * Choose, which Reunion to update.
     */
    where: ReunionWhereUniqueInput
  }

  /**
   * Reunion updateMany
   */
  export type ReunionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Reunions.
     */
    data: XOR<ReunionUpdateManyMutationInput, ReunionUncheckedUpdateManyInput>
    /**
     * Filter which Reunions to update
     */
    where?: ReunionWhereInput
  }

  /**
   * Reunion upsert
   */
  export type ReunionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reunion
     */
    select?: ReunionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReunionInclude<ExtArgs> | null
    /**
     * The filter to search for the Reunion to update in case it exists.
     */
    where: ReunionWhereUniqueInput
    /**
     * In case the Reunion found by the `where` argument doesn't exist, create a new Reunion with this data.
     */
    create: XOR<ReunionCreateInput, ReunionUncheckedCreateInput>
    /**
     * In case the Reunion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReunionUpdateInput, ReunionUncheckedUpdateInput>
  }

  /**
   * Reunion delete
   */
  export type ReunionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reunion
     */
    select?: ReunionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReunionInclude<ExtArgs> | null
    /**
     * Filter which Reunion to delete.
     */
    where: ReunionWhereUniqueInput
  }

  /**
   * Reunion deleteMany
   */
  export type ReunionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reunions to delete
     */
    where?: ReunionWhereInput
  }

  /**
   * Reunion without action
   */
  export type ReunionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reunion
     */
    select?: ReunionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReunionInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsuarioScalarFieldEnum: {
    ID_Usuario: 'ID_Usuario',
    Email: 'Email',
    Contrasena: 'Contrasena',
    Nombre: 'Nombre',
    Apellido_Paterno: 'Apellido_Paterno',
    Apellido_Materno: 'Apellido_Materno',
    Telefono: 'Telefono'
  };

  export type UsuarioScalarFieldEnum = (typeof UsuarioScalarFieldEnum)[keyof typeof UsuarioScalarFieldEnum]


  export const AnfitrionScalarFieldEnum: {
    ID_Anfitrion: 'ID_Anfitrion',
    ID_Usuario: 'ID_Usuario'
  };

  export type AnfitrionScalarFieldEnum = (typeof AnfitrionScalarFieldEnum)[keyof typeof AnfitrionScalarFieldEnum]


  export const Super_AdministradorScalarFieldEnum: {
    ID_Super_Administrador: 'ID_Super_Administrador',
    ID_Usuario: 'ID_Usuario'
  };

  export type Super_AdministradorScalarFieldEnum = (typeof Super_AdministradorScalarFieldEnum)[keyof typeof Super_AdministradorScalarFieldEnum]


  export const SalaScalarFieldEnum: {
    ID_Sala: 'ID_Sala',
    Nombre_Sala: 'Nombre_Sala',
    Capacidad: 'Capacidad',
    Piso: 'Piso'
  };

  export type SalaScalarFieldEnum = (typeof SalaScalarFieldEnum)[keyof typeof SalaScalarFieldEnum]


  export const ReunionScalarFieldEnum: {
    ID_Reunion: 'ID_Reunion',
    Titulo: 'Titulo',
    Fecha_Reunion: 'Fecha_Reunion',
    Hora_Reunion: 'Hora_Reunion',
    Descripcion: 'Descripcion',
    ID_Sala: 'ID_Sala',
    ID_Anfitrion: 'ID_Anfitrion'
  };

  export type ReunionScalarFieldEnum = (typeof ReunionScalarFieldEnum)[keyof typeof ReunionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UsuarioWhereInput = {
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    ID_Usuario?: IntFilter<"Usuario"> | number
    Email?: StringFilter<"Usuario"> | string
    Contrasena?: StringFilter<"Usuario"> | string
    Nombre?: StringFilter<"Usuario"> | string
    Apellido_Paterno?: StringFilter<"Usuario"> | string
    Apellido_Materno?: StringFilter<"Usuario"> | string
    Telefono?: DecimalFilter<"Usuario"> | Decimal | DecimalJsLike | number | string
    Anfitrion?: AnfitrionListRelationFilter
    Super_Administrador?: Super_AdministradorListRelationFilter
  }

  export type UsuarioOrderByWithRelationInput = {
    ID_Usuario?: SortOrder
    Email?: SortOrder
    Contrasena?: SortOrder
    Nombre?: SortOrder
    Apellido_Paterno?: SortOrder
    Apellido_Materno?: SortOrder
    Telefono?: SortOrder
    Anfitrion?: AnfitrionOrderByRelationAggregateInput
    Super_Administrador?: Super_AdministradorOrderByRelationAggregateInput
  }

  export type UsuarioWhereUniqueInput = Prisma.AtLeast<{
    ID_Usuario?: number
    Email?: string
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    Contrasena?: StringFilter<"Usuario"> | string
    Nombre?: StringFilter<"Usuario"> | string
    Apellido_Paterno?: StringFilter<"Usuario"> | string
    Apellido_Materno?: StringFilter<"Usuario"> | string
    Telefono?: DecimalFilter<"Usuario"> | Decimal | DecimalJsLike | number | string
    Anfitrion?: AnfitrionListRelationFilter
    Super_Administrador?: Super_AdministradorListRelationFilter
  }, "ID_Usuario" | "Email">

  export type UsuarioOrderByWithAggregationInput = {
    ID_Usuario?: SortOrder
    Email?: SortOrder
    Contrasena?: SortOrder
    Nombre?: SortOrder
    Apellido_Paterno?: SortOrder
    Apellido_Materno?: SortOrder
    Telefono?: SortOrder
    _count?: UsuarioCountOrderByAggregateInput
    _avg?: UsuarioAvgOrderByAggregateInput
    _max?: UsuarioMaxOrderByAggregateInput
    _min?: UsuarioMinOrderByAggregateInput
    _sum?: UsuarioSumOrderByAggregateInput
  }

  export type UsuarioScalarWhereWithAggregatesInput = {
    AND?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    OR?: UsuarioScalarWhereWithAggregatesInput[]
    NOT?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    ID_Usuario?: IntWithAggregatesFilter<"Usuario"> | number
    Email?: StringWithAggregatesFilter<"Usuario"> | string
    Contrasena?: StringWithAggregatesFilter<"Usuario"> | string
    Nombre?: StringWithAggregatesFilter<"Usuario"> | string
    Apellido_Paterno?: StringWithAggregatesFilter<"Usuario"> | string
    Apellido_Materno?: StringWithAggregatesFilter<"Usuario"> | string
    Telefono?: DecimalWithAggregatesFilter<"Usuario"> | Decimal | DecimalJsLike | number | string
  }

  export type AnfitrionWhereInput = {
    AND?: AnfitrionWhereInput | AnfitrionWhereInput[]
    OR?: AnfitrionWhereInput[]
    NOT?: AnfitrionWhereInput | AnfitrionWhereInput[]
    ID_Anfitrion?: IntFilter<"Anfitrion"> | number
    ID_Usuario?: IntFilter<"Anfitrion"> | number
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
    Reunion?: ReunionListRelationFilter
  }

  export type AnfitrionOrderByWithRelationInput = {
    ID_Anfitrion?: SortOrder
    ID_Usuario?: SortOrder
    usuario?: UsuarioOrderByWithRelationInput
    Reunion?: ReunionOrderByRelationAggregateInput
  }

  export type AnfitrionWhereUniqueInput = Prisma.AtLeast<{
    ID_Anfitrion?: number
    AND?: AnfitrionWhereInput | AnfitrionWhereInput[]
    OR?: AnfitrionWhereInput[]
    NOT?: AnfitrionWhereInput | AnfitrionWhereInput[]
    ID_Usuario?: IntFilter<"Anfitrion"> | number
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
    Reunion?: ReunionListRelationFilter
  }, "ID_Anfitrion">

  export type AnfitrionOrderByWithAggregationInput = {
    ID_Anfitrion?: SortOrder
    ID_Usuario?: SortOrder
    _count?: AnfitrionCountOrderByAggregateInput
    _avg?: AnfitrionAvgOrderByAggregateInput
    _max?: AnfitrionMaxOrderByAggregateInput
    _min?: AnfitrionMinOrderByAggregateInput
    _sum?: AnfitrionSumOrderByAggregateInput
  }

  export type AnfitrionScalarWhereWithAggregatesInput = {
    AND?: AnfitrionScalarWhereWithAggregatesInput | AnfitrionScalarWhereWithAggregatesInput[]
    OR?: AnfitrionScalarWhereWithAggregatesInput[]
    NOT?: AnfitrionScalarWhereWithAggregatesInput | AnfitrionScalarWhereWithAggregatesInput[]
    ID_Anfitrion?: IntWithAggregatesFilter<"Anfitrion"> | number
    ID_Usuario?: IntWithAggregatesFilter<"Anfitrion"> | number
  }

  export type Super_AdministradorWhereInput = {
    AND?: Super_AdministradorWhereInput | Super_AdministradorWhereInput[]
    OR?: Super_AdministradorWhereInput[]
    NOT?: Super_AdministradorWhereInput | Super_AdministradorWhereInput[]
    ID_Super_Administrador?: IntFilter<"Super_Administrador"> | number
    ID_Usuario?: IntFilter<"Super_Administrador"> | number
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
  }

  export type Super_AdministradorOrderByWithRelationInput = {
    ID_Super_Administrador?: SortOrder
    ID_Usuario?: SortOrder
    usuario?: UsuarioOrderByWithRelationInput
  }

  export type Super_AdministradorWhereUniqueInput = Prisma.AtLeast<{
    ID_Super_Administrador?: number
    AND?: Super_AdministradorWhereInput | Super_AdministradorWhereInput[]
    OR?: Super_AdministradorWhereInput[]
    NOT?: Super_AdministradorWhereInput | Super_AdministradorWhereInput[]
    ID_Usuario?: IntFilter<"Super_Administrador"> | number
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
  }, "ID_Super_Administrador">

  export type Super_AdministradorOrderByWithAggregationInput = {
    ID_Super_Administrador?: SortOrder
    ID_Usuario?: SortOrder
    _count?: Super_AdministradorCountOrderByAggregateInput
    _avg?: Super_AdministradorAvgOrderByAggregateInput
    _max?: Super_AdministradorMaxOrderByAggregateInput
    _min?: Super_AdministradorMinOrderByAggregateInput
    _sum?: Super_AdministradorSumOrderByAggregateInput
  }

  export type Super_AdministradorScalarWhereWithAggregatesInput = {
    AND?: Super_AdministradorScalarWhereWithAggregatesInput | Super_AdministradorScalarWhereWithAggregatesInput[]
    OR?: Super_AdministradorScalarWhereWithAggregatesInput[]
    NOT?: Super_AdministradorScalarWhereWithAggregatesInput | Super_AdministradorScalarWhereWithAggregatesInput[]
    ID_Super_Administrador?: IntWithAggregatesFilter<"Super_Administrador"> | number
    ID_Usuario?: IntWithAggregatesFilter<"Super_Administrador"> | number
  }

  export type SalaWhereInput = {
    AND?: SalaWhereInput | SalaWhereInput[]
    OR?: SalaWhereInput[]
    NOT?: SalaWhereInput | SalaWhereInput[]
    ID_Sala?: IntFilter<"Sala"> | number
    Nombre_Sala?: StringFilter<"Sala"> | string
    Capacidad?: IntFilter<"Sala"> | number
    Piso?: IntFilter<"Sala"> | number
    Reunion?: ReunionListRelationFilter
  }

  export type SalaOrderByWithRelationInput = {
    ID_Sala?: SortOrder
    Nombre_Sala?: SortOrder
    Capacidad?: SortOrder
    Piso?: SortOrder
    Reunion?: ReunionOrderByRelationAggregateInput
  }

  export type SalaWhereUniqueInput = Prisma.AtLeast<{
    ID_Sala?: number
    AND?: SalaWhereInput | SalaWhereInput[]
    OR?: SalaWhereInput[]
    NOT?: SalaWhereInput | SalaWhereInput[]
    Nombre_Sala?: StringFilter<"Sala"> | string
    Capacidad?: IntFilter<"Sala"> | number
    Piso?: IntFilter<"Sala"> | number
    Reunion?: ReunionListRelationFilter
  }, "ID_Sala">

  export type SalaOrderByWithAggregationInput = {
    ID_Sala?: SortOrder
    Nombre_Sala?: SortOrder
    Capacidad?: SortOrder
    Piso?: SortOrder
    _count?: SalaCountOrderByAggregateInput
    _avg?: SalaAvgOrderByAggregateInput
    _max?: SalaMaxOrderByAggregateInput
    _min?: SalaMinOrderByAggregateInput
    _sum?: SalaSumOrderByAggregateInput
  }

  export type SalaScalarWhereWithAggregatesInput = {
    AND?: SalaScalarWhereWithAggregatesInput | SalaScalarWhereWithAggregatesInput[]
    OR?: SalaScalarWhereWithAggregatesInput[]
    NOT?: SalaScalarWhereWithAggregatesInput | SalaScalarWhereWithAggregatesInput[]
    ID_Sala?: IntWithAggregatesFilter<"Sala"> | number
    Nombre_Sala?: StringWithAggregatesFilter<"Sala"> | string
    Capacidad?: IntWithAggregatesFilter<"Sala"> | number
    Piso?: IntWithAggregatesFilter<"Sala"> | number
  }

  export type ReunionWhereInput = {
    AND?: ReunionWhereInput | ReunionWhereInput[]
    OR?: ReunionWhereInput[]
    NOT?: ReunionWhereInput | ReunionWhereInput[]
    ID_Reunion?: IntFilter<"Reunion"> | number
    Titulo?: StringFilter<"Reunion"> | string
    Fecha_Reunion?: StringFilter<"Reunion"> | string
    Hora_Reunion?: StringFilter<"Reunion"> | string
    Descripcion?: StringFilter<"Reunion"> | string
    ID_Sala?: IntFilter<"Reunion"> | number
    ID_Anfitrion?: IntFilter<"Reunion"> | number
    sala?: XOR<SalaRelationFilter, SalaWhereInput>
    anfitrion?: XOR<AnfitrionRelationFilter, AnfitrionWhereInput>
  }

  export type ReunionOrderByWithRelationInput = {
    ID_Reunion?: SortOrder
    Titulo?: SortOrder
    Fecha_Reunion?: SortOrder
    Hora_Reunion?: SortOrder
    Descripcion?: SortOrder
    ID_Sala?: SortOrder
    ID_Anfitrion?: SortOrder
    sala?: SalaOrderByWithRelationInput
    anfitrion?: AnfitrionOrderByWithRelationInput
  }

  export type ReunionWhereUniqueInput = Prisma.AtLeast<{
    ID_Reunion?: number
    AND?: ReunionWhereInput | ReunionWhereInput[]
    OR?: ReunionWhereInput[]
    NOT?: ReunionWhereInput | ReunionWhereInput[]
    Titulo?: StringFilter<"Reunion"> | string
    Fecha_Reunion?: StringFilter<"Reunion"> | string
    Hora_Reunion?: StringFilter<"Reunion"> | string
    Descripcion?: StringFilter<"Reunion"> | string
    ID_Sala?: IntFilter<"Reunion"> | number
    ID_Anfitrion?: IntFilter<"Reunion"> | number
    sala?: XOR<SalaRelationFilter, SalaWhereInput>
    anfitrion?: XOR<AnfitrionRelationFilter, AnfitrionWhereInput>
  }, "ID_Reunion">

  export type ReunionOrderByWithAggregationInput = {
    ID_Reunion?: SortOrder
    Titulo?: SortOrder
    Fecha_Reunion?: SortOrder
    Hora_Reunion?: SortOrder
    Descripcion?: SortOrder
    ID_Sala?: SortOrder
    ID_Anfitrion?: SortOrder
    _count?: ReunionCountOrderByAggregateInput
    _avg?: ReunionAvgOrderByAggregateInput
    _max?: ReunionMaxOrderByAggregateInput
    _min?: ReunionMinOrderByAggregateInput
    _sum?: ReunionSumOrderByAggregateInput
  }

  export type ReunionScalarWhereWithAggregatesInput = {
    AND?: ReunionScalarWhereWithAggregatesInput | ReunionScalarWhereWithAggregatesInput[]
    OR?: ReunionScalarWhereWithAggregatesInput[]
    NOT?: ReunionScalarWhereWithAggregatesInput | ReunionScalarWhereWithAggregatesInput[]
    ID_Reunion?: IntWithAggregatesFilter<"Reunion"> | number
    Titulo?: StringWithAggregatesFilter<"Reunion"> | string
    Fecha_Reunion?: StringWithAggregatesFilter<"Reunion"> | string
    Hora_Reunion?: StringWithAggregatesFilter<"Reunion"> | string
    Descripcion?: StringWithAggregatesFilter<"Reunion"> | string
    ID_Sala?: IntWithAggregatesFilter<"Reunion"> | number
    ID_Anfitrion?: IntWithAggregatesFilter<"Reunion"> | number
  }

  export type UsuarioCreateInput = {
    Email: string
    Contrasena: string
    Nombre: string
    Apellido_Paterno: string
    Apellido_Materno: string
    Telefono: Decimal | DecimalJsLike | number | string
    Anfitrion?: AnfitrionCreateNestedManyWithoutUsuarioInput
    Super_Administrador?: Super_AdministradorCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateInput = {
    ID_Usuario?: number
    Email: string
    Contrasena: string
    Nombre: string
    Apellido_Paterno: string
    Apellido_Materno: string
    Telefono: Decimal | DecimalJsLike | number | string
    Anfitrion?: AnfitrionUncheckedCreateNestedManyWithoutUsuarioInput
    Super_Administrador?: Super_AdministradorUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUpdateInput = {
    Email?: StringFieldUpdateOperationsInput | string
    Contrasena?: StringFieldUpdateOperationsInput | string
    Nombre?: StringFieldUpdateOperationsInput | string
    Apellido_Paterno?: StringFieldUpdateOperationsInput | string
    Apellido_Materno?: StringFieldUpdateOperationsInput | string
    Telefono?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Anfitrion?: AnfitrionUpdateManyWithoutUsuarioNestedInput
    Super_Administrador?: Super_AdministradorUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateInput = {
    ID_Usuario?: IntFieldUpdateOperationsInput | number
    Email?: StringFieldUpdateOperationsInput | string
    Contrasena?: StringFieldUpdateOperationsInput | string
    Nombre?: StringFieldUpdateOperationsInput | string
    Apellido_Paterno?: StringFieldUpdateOperationsInput | string
    Apellido_Materno?: StringFieldUpdateOperationsInput | string
    Telefono?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Anfitrion?: AnfitrionUncheckedUpdateManyWithoutUsuarioNestedInput
    Super_Administrador?: Super_AdministradorUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioCreateManyInput = {
    ID_Usuario?: number
    Email: string
    Contrasena: string
    Nombre: string
    Apellido_Paterno: string
    Apellido_Materno: string
    Telefono: Decimal | DecimalJsLike | number | string
  }

  export type UsuarioUpdateManyMutationInput = {
    Email?: StringFieldUpdateOperationsInput | string
    Contrasena?: StringFieldUpdateOperationsInput | string
    Nombre?: StringFieldUpdateOperationsInput | string
    Apellido_Paterno?: StringFieldUpdateOperationsInput | string
    Apellido_Materno?: StringFieldUpdateOperationsInput | string
    Telefono?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type UsuarioUncheckedUpdateManyInput = {
    ID_Usuario?: IntFieldUpdateOperationsInput | number
    Email?: StringFieldUpdateOperationsInput | string
    Contrasena?: StringFieldUpdateOperationsInput | string
    Nombre?: StringFieldUpdateOperationsInput | string
    Apellido_Paterno?: StringFieldUpdateOperationsInput | string
    Apellido_Materno?: StringFieldUpdateOperationsInput | string
    Telefono?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type AnfitrionCreateInput = {
    usuario: UsuarioCreateNestedOneWithoutAnfitrionInput
    Reunion?: ReunionCreateNestedManyWithoutAnfitrionInput
  }

  export type AnfitrionUncheckedCreateInput = {
    ID_Anfitrion?: number
    ID_Usuario: number
    Reunion?: ReunionUncheckedCreateNestedManyWithoutAnfitrionInput
  }

  export type AnfitrionUpdateInput = {
    usuario?: UsuarioUpdateOneRequiredWithoutAnfitrionNestedInput
    Reunion?: ReunionUpdateManyWithoutAnfitrionNestedInput
  }

  export type AnfitrionUncheckedUpdateInput = {
    ID_Anfitrion?: IntFieldUpdateOperationsInput | number
    ID_Usuario?: IntFieldUpdateOperationsInput | number
    Reunion?: ReunionUncheckedUpdateManyWithoutAnfitrionNestedInput
  }

  export type AnfitrionCreateManyInput = {
    ID_Anfitrion?: number
    ID_Usuario: number
  }

  export type AnfitrionUpdateManyMutationInput = {

  }

  export type AnfitrionUncheckedUpdateManyInput = {
    ID_Anfitrion?: IntFieldUpdateOperationsInput | number
    ID_Usuario?: IntFieldUpdateOperationsInput | number
  }

  export type Super_AdministradorCreateInput = {
    usuario: UsuarioCreateNestedOneWithoutSuper_AdministradorInput
  }

  export type Super_AdministradorUncheckedCreateInput = {
    ID_Super_Administrador?: number
    ID_Usuario: number
  }

  export type Super_AdministradorUpdateInput = {
    usuario?: UsuarioUpdateOneRequiredWithoutSuper_AdministradorNestedInput
  }

  export type Super_AdministradorUncheckedUpdateInput = {
    ID_Super_Administrador?: IntFieldUpdateOperationsInput | number
    ID_Usuario?: IntFieldUpdateOperationsInput | number
  }

  export type Super_AdministradorCreateManyInput = {
    ID_Super_Administrador?: number
    ID_Usuario: number
  }

  export type Super_AdministradorUpdateManyMutationInput = {

  }

  export type Super_AdministradorUncheckedUpdateManyInput = {
    ID_Super_Administrador?: IntFieldUpdateOperationsInput | number
    ID_Usuario?: IntFieldUpdateOperationsInput | number
  }

  export type SalaCreateInput = {
    Nombre_Sala: string
    Capacidad: number
    Piso: number
    Reunion?: ReunionCreateNestedManyWithoutSalaInput
  }

  export type SalaUncheckedCreateInput = {
    ID_Sala?: number
    Nombre_Sala: string
    Capacidad: number
    Piso: number
    Reunion?: ReunionUncheckedCreateNestedManyWithoutSalaInput
  }

  export type SalaUpdateInput = {
    Nombre_Sala?: StringFieldUpdateOperationsInput | string
    Capacidad?: IntFieldUpdateOperationsInput | number
    Piso?: IntFieldUpdateOperationsInput | number
    Reunion?: ReunionUpdateManyWithoutSalaNestedInput
  }

  export type SalaUncheckedUpdateInput = {
    ID_Sala?: IntFieldUpdateOperationsInput | number
    Nombre_Sala?: StringFieldUpdateOperationsInput | string
    Capacidad?: IntFieldUpdateOperationsInput | number
    Piso?: IntFieldUpdateOperationsInput | number
    Reunion?: ReunionUncheckedUpdateManyWithoutSalaNestedInput
  }

  export type SalaCreateManyInput = {
    ID_Sala?: number
    Nombre_Sala: string
    Capacidad: number
    Piso: number
  }

  export type SalaUpdateManyMutationInput = {
    Nombre_Sala?: StringFieldUpdateOperationsInput | string
    Capacidad?: IntFieldUpdateOperationsInput | number
    Piso?: IntFieldUpdateOperationsInput | number
  }

  export type SalaUncheckedUpdateManyInput = {
    ID_Sala?: IntFieldUpdateOperationsInput | number
    Nombre_Sala?: StringFieldUpdateOperationsInput | string
    Capacidad?: IntFieldUpdateOperationsInput | number
    Piso?: IntFieldUpdateOperationsInput | number
  }

  export type ReunionCreateInput = {
    Titulo: string
    Fecha_Reunion: string
    Hora_Reunion: string
    Descripcion: string
    sala: SalaCreateNestedOneWithoutReunionInput
    anfitrion: AnfitrionCreateNestedOneWithoutReunionInput
  }

  export type ReunionUncheckedCreateInput = {
    ID_Reunion?: number
    Titulo: string
    Fecha_Reunion: string
    Hora_Reunion: string
    Descripcion: string
    ID_Sala: number
    ID_Anfitrion: number
  }

  export type ReunionUpdateInput = {
    Titulo?: StringFieldUpdateOperationsInput | string
    Fecha_Reunion?: StringFieldUpdateOperationsInput | string
    Hora_Reunion?: StringFieldUpdateOperationsInput | string
    Descripcion?: StringFieldUpdateOperationsInput | string
    sala?: SalaUpdateOneRequiredWithoutReunionNestedInput
    anfitrion?: AnfitrionUpdateOneRequiredWithoutReunionNestedInput
  }

  export type ReunionUncheckedUpdateInput = {
    ID_Reunion?: IntFieldUpdateOperationsInput | number
    Titulo?: StringFieldUpdateOperationsInput | string
    Fecha_Reunion?: StringFieldUpdateOperationsInput | string
    Hora_Reunion?: StringFieldUpdateOperationsInput | string
    Descripcion?: StringFieldUpdateOperationsInput | string
    ID_Sala?: IntFieldUpdateOperationsInput | number
    ID_Anfitrion?: IntFieldUpdateOperationsInput | number
  }

  export type ReunionCreateManyInput = {
    ID_Reunion?: number
    Titulo: string
    Fecha_Reunion: string
    Hora_Reunion: string
    Descripcion: string
    ID_Sala: number
    ID_Anfitrion: number
  }

  export type ReunionUpdateManyMutationInput = {
    Titulo?: StringFieldUpdateOperationsInput | string
    Fecha_Reunion?: StringFieldUpdateOperationsInput | string
    Hora_Reunion?: StringFieldUpdateOperationsInput | string
    Descripcion?: StringFieldUpdateOperationsInput | string
  }

  export type ReunionUncheckedUpdateManyInput = {
    ID_Reunion?: IntFieldUpdateOperationsInput | number
    Titulo?: StringFieldUpdateOperationsInput | string
    Fecha_Reunion?: StringFieldUpdateOperationsInput | string
    Hora_Reunion?: StringFieldUpdateOperationsInput | string
    Descripcion?: StringFieldUpdateOperationsInput | string
    ID_Sala?: IntFieldUpdateOperationsInput | number
    ID_Anfitrion?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type AnfitrionListRelationFilter = {
    every?: AnfitrionWhereInput
    some?: AnfitrionWhereInput
    none?: AnfitrionWhereInput
  }

  export type Super_AdministradorListRelationFilter = {
    every?: Super_AdministradorWhereInput
    some?: Super_AdministradorWhereInput
    none?: Super_AdministradorWhereInput
  }

  export type AnfitrionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type Super_AdministradorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsuarioCountOrderByAggregateInput = {
    ID_Usuario?: SortOrder
    Email?: SortOrder
    Contrasena?: SortOrder
    Nombre?: SortOrder
    Apellido_Paterno?: SortOrder
    Apellido_Materno?: SortOrder
    Telefono?: SortOrder
  }

  export type UsuarioAvgOrderByAggregateInput = {
    ID_Usuario?: SortOrder
    Telefono?: SortOrder
  }

  export type UsuarioMaxOrderByAggregateInput = {
    ID_Usuario?: SortOrder
    Email?: SortOrder
    Contrasena?: SortOrder
    Nombre?: SortOrder
    Apellido_Paterno?: SortOrder
    Apellido_Materno?: SortOrder
    Telefono?: SortOrder
  }

  export type UsuarioMinOrderByAggregateInput = {
    ID_Usuario?: SortOrder
    Email?: SortOrder
    Contrasena?: SortOrder
    Nombre?: SortOrder
    Apellido_Paterno?: SortOrder
    Apellido_Materno?: SortOrder
    Telefono?: SortOrder
  }

  export type UsuarioSumOrderByAggregateInput = {
    ID_Usuario?: SortOrder
    Telefono?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type UsuarioRelationFilter = {
    is?: UsuarioWhereInput
    isNot?: UsuarioWhereInput
  }

  export type ReunionListRelationFilter = {
    every?: ReunionWhereInput
    some?: ReunionWhereInput
    none?: ReunionWhereInput
  }

  export type ReunionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AnfitrionCountOrderByAggregateInput = {
    ID_Anfitrion?: SortOrder
    ID_Usuario?: SortOrder
  }

  export type AnfitrionAvgOrderByAggregateInput = {
    ID_Anfitrion?: SortOrder
    ID_Usuario?: SortOrder
  }

  export type AnfitrionMaxOrderByAggregateInput = {
    ID_Anfitrion?: SortOrder
    ID_Usuario?: SortOrder
  }

  export type AnfitrionMinOrderByAggregateInput = {
    ID_Anfitrion?: SortOrder
    ID_Usuario?: SortOrder
  }

  export type AnfitrionSumOrderByAggregateInput = {
    ID_Anfitrion?: SortOrder
    ID_Usuario?: SortOrder
  }

  export type Super_AdministradorCountOrderByAggregateInput = {
    ID_Super_Administrador?: SortOrder
    ID_Usuario?: SortOrder
  }

  export type Super_AdministradorAvgOrderByAggregateInput = {
    ID_Super_Administrador?: SortOrder
    ID_Usuario?: SortOrder
  }

  export type Super_AdministradorMaxOrderByAggregateInput = {
    ID_Super_Administrador?: SortOrder
    ID_Usuario?: SortOrder
  }

  export type Super_AdministradorMinOrderByAggregateInput = {
    ID_Super_Administrador?: SortOrder
    ID_Usuario?: SortOrder
  }

  export type Super_AdministradorSumOrderByAggregateInput = {
    ID_Super_Administrador?: SortOrder
    ID_Usuario?: SortOrder
  }

  export type SalaCountOrderByAggregateInput = {
    ID_Sala?: SortOrder
    Nombre_Sala?: SortOrder
    Capacidad?: SortOrder
    Piso?: SortOrder
  }

  export type SalaAvgOrderByAggregateInput = {
    ID_Sala?: SortOrder
    Capacidad?: SortOrder
    Piso?: SortOrder
  }

  export type SalaMaxOrderByAggregateInput = {
    ID_Sala?: SortOrder
    Nombre_Sala?: SortOrder
    Capacidad?: SortOrder
    Piso?: SortOrder
  }

  export type SalaMinOrderByAggregateInput = {
    ID_Sala?: SortOrder
    Nombre_Sala?: SortOrder
    Capacidad?: SortOrder
    Piso?: SortOrder
  }

  export type SalaSumOrderByAggregateInput = {
    ID_Sala?: SortOrder
    Capacidad?: SortOrder
    Piso?: SortOrder
  }

  export type SalaRelationFilter = {
    is?: SalaWhereInput
    isNot?: SalaWhereInput
  }

  export type AnfitrionRelationFilter = {
    is?: AnfitrionWhereInput
    isNot?: AnfitrionWhereInput
  }

  export type ReunionCountOrderByAggregateInput = {
    ID_Reunion?: SortOrder
    Titulo?: SortOrder
    Fecha_Reunion?: SortOrder
    Hora_Reunion?: SortOrder
    Descripcion?: SortOrder
    ID_Sala?: SortOrder
    ID_Anfitrion?: SortOrder
  }

  export type ReunionAvgOrderByAggregateInput = {
    ID_Reunion?: SortOrder
    ID_Sala?: SortOrder
    ID_Anfitrion?: SortOrder
  }

  export type ReunionMaxOrderByAggregateInput = {
    ID_Reunion?: SortOrder
    Titulo?: SortOrder
    Fecha_Reunion?: SortOrder
    Hora_Reunion?: SortOrder
    Descripcion?: SortOrder
    ID_Sala?: SortOrder
    ID_Anfitrion?: SortOrder
  }

  export type ReunionMinOrderByAggregateInput = {
    ID_Reunion?: SortOrder
    Titulo?: SortOrder
    Fecha_Reunion?: SortOrder
    Hora_Reunion?: SortOrder
    Descripcion?: SortOrder
    ID_Sala?: SortOrder
    ID_Anfitrion?: SortOrder
  }

  export type ReunionSumOrderByAggregateInput = {
    ID_Reunion?: SortOrder
    ID_Sala?: SortOrder
    ID_Anfitrion?: SortOrder
  }

  export type AnfitrionCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<AnfitrionCreateWithoutUsuarioInput, AnfitrionUncheckedCreateWithoutUsuarioInput> | AnfitrionCreateWithoutUsuarioInput[] | AnfitrionUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: AnfitrionCreateOrConnectWithoutUsuarioInput | AnfitrionCreateOrConnectWithoutUsuarioInput[]
    createMany?: AnfitrionCreateManyUsuarioInputEnvelope
    connect?: AnfitrionWhereUniqueInput | AnfitrionWhereUniqueInput[]
  }

  export type Super_AdministradorCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<Super_AdministradorCreateWithoutUsuarioInput, Super_AdministradorUncheckedCreateWithoutUsuarioInput> | Super_AdministradorCreateWithoutUsuarioInput[] | Super_AdministradorUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: Super_AdministradorCreateOrConnectWithoutUsuarioInput | Super_AdministradorCreateOrConnectWithoutUsuarioInput[]
    createMany?: Super_AdministradorCreateManyUsuarioInputEnvelope
    connect?: Super_AdministradorWhereUniqueInput | Super_AdministradorWhereUniqueInput[]
  }

  export type AnfitrionUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<AnfitrionCreateWithoutUsuarioInput, AnfitrionUncheckedCreateWithoutUsuarioInput> | AnfitrionCreateWithoutUsuarioInput[] | AnfitrionUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: AnfitrionCreateOrConnectWithoutUsuarioInput | AnfitrionCreateOrConnectWithoutUsuarioInput[]
    createMany?: AnfitrionCreateManyUsuarioInputEnvelope
    connect?: AnfitrionWhereUniqueInput | AnfitrionWhereUniqueInput[]
  }

  export type Super_AdministradorUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<Super_AdministradorCreateWithoutUsuarioInput, Super_AdministradorUncheckedCreateWithoutUsuarioInput> | Super_AdministradorCreateWithoutUsuarioInput[] | Super_AdministradorUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: Super_AdministradorCreateOrConnectWithoutUsuarioInput | Super_AdministradorCreateOrConnectWithoutUsuarioInput[]
    createMany?: Super_AdministradorCreateManyUsuarioInputEnvelope
    connect?: Super_AdministradorWhereUniqueInput | Super_AdministradorWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type AnfitrionUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<AnfitrionCreateWithoutUsuarioInput, AnfitrionUncheckedCreateWithoutUsuarioInput> | AnfitrionCreateWithoutUsuarioInput[] | AnfitrionUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: AnfitrionCreateOrConnectWithoutUsuarioInput | AnfitrionCreateOrConnectWithoutUsuarioInput[]
    upsert?: AnfitrionUpsertWithWhereUniqueWithoutUsuarioInput | AnfitrionUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: AnfitrionCreateManyUsuarioInputEnvelope
    set?: AnfitrionWhereUniqueInput | AnfitrionWhereUniqueInput[]
    disconnect?: AnfitrionWhereUniqueInput | AnfitrionWhereUniqueInput[]
    delete?: AnfitrionWhereUniqueInput | AnfitrionWhereUniqueInput[]
    connect?: AnfitrionWhereUniqueInput | AnfitrionWhereUniqueInput[]
    update?: AnfitrionUpdateWithWhereUniqueWithoutUsuarioInput | AnfitrionUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: AnfitrionUpdateManyWithWhereWithoutUsuarioInput | AnfitrionUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: AnfitrionScalarWhereInput | AnfitrionScalarWhereInput[]
  }

  export type Super_AdministradorUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<Super_AdministradorCreateWithoutUsuarioInput, Super_AdministradorUncheckedCreateWithoutUsuarioInput> | Super_AdministradorCreateWithoutUsuarioInput[] | Super_AdministradorUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: Super_AdministradorCreateOrConnectWithoutUsuarioInput | Super_AdministradorCreateOrConnectWithoutUsuarioInput[]
    upsert?: Super_AdministradorUpsertWithWhereUniqueWithoutUsuarioInput | Super_AdministradorUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: Super_AdministradorCreateManyUsuarioInputEnvelope
    set?: Super_AdministradorWhereUniqueInput | Super_AdministradorWhereUniqueInput[]
    disconnect?: Super_AdministradorWhereUniqueInput | Super_AdministradorWhereUniqueInput[]
    delete?: Super_AdministradorWhereUniqueInput | Super_AdministradorWhereUniqueInput[]
    connect?: Super_AdministradorWhereUniqueInput | Super_AdministradorWhereUniqueInput[]
    update?: Super_AdministradorUpdateWithWhereUniqueWithoutUsuarioInput | Super_AdministradorUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: Super_AdministradorUpdateManyWithWhereWithoutUsuarioInput | Super_AdministradorUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: Super_AdministradorScalarWhereInput | Super_AdministradorScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AnfitrionUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<AnfitrionCreateWithoutUsuarioInput, AnfitrionUncheckedCreateWithoutUsuarioInput> | AnfitrionCreateWithoutUsuarioInput[] | AnfitrionUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: AnfitrionCreateOrConnectWithoutUsuarioInput | AnfitrionCreateOrConnectWithoutUsuarioInput[]
    upsert?: AnfitrionUpsertWithWhereUniqueWithoutUsuarioInput | AnfitrionUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: AnfitrionCreateManyUsuarioInputEnvelope
    set?: AnfitrionWhereUniqueInput | AnfitrionWhereUniqueInput[]
    disconnect?: AnfitrionWhereUniqueInput | AnfitrionWhereUniqueInput[]
    delete?: AnfitrionWhereUniqueInput | AnfitrionWhereUniqueInput[]
    connect?: AnfitrionWhereUniqueInput | AnfitrionWhereUniqueInput[]
    update?: AnfitrionUpdateWithWhereUniqueWithoutUsuarioInput | AnfitrionUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: AnfitrionUpdateManyWithWhereWithoutUsuarioInput | AnfitrionUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: AnfitrionScalarWhereInput | AnfitrionScalarWhereInput[]
  }

  export type Super_AdministradorUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<Super_AdministradorCreateWithoutUsuarioInput, Super_AdministradorUncheckedCreateWithoutUsuarioInput> | Super_AdministradorCreateWithoutUsuarioInput[] | Super_AdministradorUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: Super_AdministradorCreateOrConnectWithoutUsuarioInput | Super_AdministradorCreateOrConnectWithoutUsuarioInput[]
    upsert?: Super_AdministradorUpsertWithWhereUniqueWithoutUsuarioInput | Super_AdministradorUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: Super_AdministradorCreateManyUsuarioInputEnvelope
    set?: Super_AdministradorWhereUniqueInput | Super_AdministradorWhereUniqueInput[]
    disconnect?: Super_AdministradorWhereUniqueInput | Super_AdministradorWhereUniqueInput[]
    delete?: Super_AdministradorWhereUniqueInput | Super_AdministradorWhereUniqueInput[]
    connect?: Super_AdministradorWhereUniqueInput | Super_AdministradorWhereUniqueInput[]
    update?: Super_AdministradorUpdateWithWhereUniqueWithoutUsuarioInput | Super_AdministradorUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: Super_AdministradorUpdateManyWithWhereWithoutUsuarioInput | Super_AdministradorUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: Super_AdministradorScalarWhereInput | Super_AdministradorScalarWhereInput[]
  }

  export type UsuarioCreateNestedOneWithoutAnfitrionInput = {
    create?: XOR<UsuarioCreateWithoutAnfitrionInput, UsuarioUncheckedCreateWithoutAnfitrionInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutAnfitrionInput
    connect?: UsuarioWhereUniqueInput
  }

  export type ReunionCreateNestedManyWithoutAnfitrionInput = {
    create?: XOR<ReunionCreateWithoutAnfitrionInput, ReunionUncheckedCreateWithoutAnfitrionInput> | ReunionCreateWithoutAnfitrionInput[] | ReunionUncheckedCreateWithoutAnfitrionInput[]
    connectOrCreate?: ReunionCreateOrConnectWithoutAnfitrionInput | ReunionCreateOrConnectWithoutAnfitrionInput[]
    createMany?: ReunionCreateManyAnfitrionInputEnvelope
    connect?: ReunionWhereUniqueInput | ReunionWhereUniqueInput[]
  }

  export type ReunionUncheckedCreateNestedManyWithoutAnfitrionInput = {
    create?: XOR<ReunionCreateWithoutAnfitrionInput, ReunionUncheckedCreateWithoutAnfitrionInput> | ReunionCreateWithoutAnfitrionInput[] | ReunionUncheckedCreateWithoutAnfitrionInput[]
    connectOrCreate?: ReunionCreateOrConnectWithoutAnfitrionInput | ReunionCreateOrConnectWithoutAnfitrionInput[]
    createMany?: ReunionCreateManyAnfitrionInputEnvelope
    connect?: ReunionWhereUniqueInput | ReunionWhereUniqueInput[]
  }

  export type UsuarioUpdateOneRequiredWithoutAnfitrionNestedInput = {
    create?: XOR<UsuarioCreateWithoutAnfitrionInput, UsuarioUncheckedCreateWithoutAnfitrionInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutAnfitrionInput
    upsert?: UsuarioUpsertWithoutAnfitrionInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutAnfitrionInput, UsuarioUpdateWithoutAnfitrionInput>, UsuarioUncheckedUpdateWithoutAnfitrionInput>
  }

  export type ReunionUpdateManyWithoutAnfitrionNestedInput = {
    create?: XOR<ReunionCreateWithoutAnfitrionInput, ReunionUncheckedCreateWithoutAnfitrionInput> | ReunionCreateWithoutAnfitrionInput[] | ReunionUncheckedCreateWithoutAnfitrionInput[]
    connectOrCreate?: ReunionCreateOrConnectWithoutAnfitrionInput | ReunionCreateOrConnectWithoutAnfitrionInput[]
    upsert?: ReunionUpsertWithWhereUniqueWithoutAnfitrionInput | ReunionUpsertWithWhereUniqueWithoutAnfitrionInput[]
    createMany?: ReunionCreateManyAnfitrionInputEnvelope
    set?: ReunionWhereUniqueInput | ReunionWhereUniqueInput[]
    disconnect?: ReunionWhereUniqueInput | ReunionWhereUniqueInput[]
    delete?: ReunionWhereUniqueInput | ReunionWhereUniqueInput[]
    connect?: ReunionWhereUniqueInput | ReunionWhereUniqueInput[]
    update?: ReunionUpdateWithWhereUniqueWithoutAnfitrionInput | ReunionUpdateWithWhereUniqueWithoutAnfitrionInput[]
    updateMany?: ReunionUpdateManyWithWhereWithoutAnfitrionInput | ReunionUpdateManyWithWhereWithoutAnfitrionInput[]
    deleteMany?: ReunionScalarWhereInput | ReunionScalarWhereInput[]
  }

  export type ReunionUncheckedUpdateManyWithoutAnfitrionNestedInput = {
    create?: XOR<ReunionCreateWithoutAnfitrionInput, ReunionUncheckedCreateWithoutAnfitrionInput> | ReunionCreateWithoutAnfitrionInput[] | ReunionUncheckedCreateWithoutAnfitrionInput[]
    connectOrCreate?: ReunionCreateOrConnectWithoutAnfitrionInput | ReunionCreateOrConnectWithoutAnfitrionInput[]
    upsert?: ReunionUpsertWithWhereUniqueWithoutAnfitrionInput | ReunionUpsertWithWhereUniqueWithoutAnfitrionInput[]
    createMany?: ReunionCreateManyAnfitrionInputEnvelope
    set?: ReunionWhereUniqueInput | ReunionWhereUniqueInput[]
    disconnect?: ReunionWhereUniqueInput | ReunionWhereUniqueInput[]
    delete?: ReunionWhereUniqueInput | ReunionWhereUniqueInput[]
    connect?: ReunionWhereUniqueInput | ReunionWhereUniqueInput[]
    update?: ReunionUpdateWithWhereUniqueWithoutAnfitrionInput | ReunionUpdateWithWhereUniqueWithoutAnfitrionInput[]
    updateMany?: ReunionUpdateManyWithWhereWithoutAnfitrionInput | ReunionUpdateManyWithWhereWithoutAnfitrionInput[]
    deleteMany?: ReunionScalarWhereInput | ReunionScalarWhereInput[]
  }

  export type UsuarioCreateNestedOneWithoutSuper_AdministradorInput = {
    create?: XOR<UsuarioCreateWithoutSuper_AdministradorInput, UsuarioUncheckedCreateWithoutSuper_AdministradorInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutSuper_AdministradorInput
    connect?: UsuarioWhereUniqueInput
  }

  export type UsuarioUpdateOneRequiredWithoutSuper_AdministradorNestedInput = {
    create?: XOR<UsuarioCreateWithoutSuper_AdministradorInput, UsuarioUncheckedCreateWithoutSuper_AdministradorInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutSuper_AdministradorInput
    upsert?: UsuarioUpsertWithoutSuper_AdministradorInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutSuper_AdministradorInput, UsuarioUpdateWithoutSuper_AdministradorInput>, UsuarioUncheckedUpdateWithoutSuper_AdministradorInput>
  }

  export type ReunionCreateNestedManyWithoutSalaInput = {
    create?: XOR<ReunionCreateWithoutSalaInput, ReunionUncheckedCreateWithoutSalaInput> | ReunionCreateWithoutSalaInput[] | ReunionUncheckedCreateWithoutSalaInput[]
    connectOrCreate?: ReunionCreateOrConnectWithoutSalaInput | ReunionCreateOrConnectWithoutSalaInput[]
    createMany?: ReunionCreateManySalaInputEnvelope
    connect?: ReunionWhereUniqueInput | ReunionWhereUniqueInput[]
  }

  export type ReunionUncheckedCreateNestedManyWithoutSalaInput = {
    create?: XOR<ReunionCreateWithoutSalaInput, ReunionUncheckedCreateWithoutSalaInput> | ReunionCreateWithoutSalaInput[] | ReunionUncheckedCreateWithoutSalaInput[]
    connectOrCreate?: ReunionCreateOrConnectWithoutSalaInput | ReunionCreateOrConnectWithoutSalaInput[]
    createMany?: ReunionCreateManySalaInputEnvelope
    connect?: ReunionWhereUniqueInput | ReunionWhereUniqueInput[]
  }

  export type ReunionUpdateManyWithoutSalaNestedInput = {
    create?: XOR<ReunionCreateWithoutSalaInput, ReunionUncheckedCreateWithoutSalaInput> | ReunionCreateWithoutSalaInput[] | ReunionUncheckedCreateWithoutSalaInput[]
    connectOrCreate?: ReunionCreateOrConnectWithoutSalaInput | ReunionCreateOrConnectWithoutSalaInput[]
    upsert?: ReunionUpsertWithWhereUniqueWithoutSalaInput | ReunionUpsertWithWhereUniqueWithoutSalaInput[]
    createMany?: ReunionCreateManySalaInputEnvelope
    set?: ReunionWhereUniqueInput | ReunionWhereUniqueInput[]
    disconnect?: ReunionWhereUniqueInput | ReunionWhereUniqueInput[]
    delete?: ReunionWhereUniqueInput | ReunionWhereUniqueInput[]
    connect?: ReunionWhereUniqueInput | ReunionWhereUniqueInput[]
    update?: ReunionUpdateWithWhereUniqueWithoutSalaInput | ReunionUpdateWithWhereUniqueWithoutSalaInput[]
    updateMany?: ReunionUpdateManyWithWhereWithoutSalaInput | ReunionUpdateManyWithWhereWithoutSalaInput[]
    deleteMany?: ReunionScalarWhereInput | ReunionScalarWhereInput[]
  }

  export type ReunionUncheckedUpdateManyWithoutSalaNestedInput = {
    create?: XOR<ReunionCreateWithoutSalaInput, ReunionUncheckedCreateWithoutSalaInput> | ReunionCreateWithoutSalaInput[] | ReunionUncheckedCreateWithoutSalaInput[]
    connectOrCreate?: ReunionCreateOrConnectWithoutSalaInput | ReunionCreateOrConnectWithoutSalaInput[]
    upsert?: ReunionUpsertWithWhereUniqueWithoutSalaInput | ReunionUpsertWithWhereUniqueWithoutSalaInput[]
    createMany?: ReunionCreateManySalaInputEnvelope
    set?: ReunionWhereUniqueInput | ReunionWhereUniqueInput[]
    disconnect?: ReunionWhereUniqueInput | ReunionWhereUniqueInput[]
    delete?: ReunionWhereUniqueInput | ReunionWhereUniqueInput[]
    connect?: ReunionWhereUniqueInput | ReunionWhereUniqueInput[]
    update?: ReunionUpdateWithWhereUniqueWithoutSalaInput | ReunionUpdateWithWhereUniqueWithoutSalaInput[]
    updateMany?: ReunionUpdateManyWithWhereWithoutSalaInput | ReunionUpdateManyWithWhereWithoutSalaInput[]
    deleteMany?: ReunionScalarWhereInput | ReunionScalarWhereInput[]
  }

  export type SalaCreateNestedOneWithoutReunionInput = {
    create?: XOR<SalaCreateWithoutReunionInput, SalaUncheckedCreateWithoutReunionInput>
    connectOrCreate?: SalaCreateOrConnectWithoutReunionInput
    connect?: SalaWhereUniqueInput
  }

  export type AnfitrionCreateNestedOneWithoutReunionInput = {
    create?: XOR<AnfitrionCreateWithoutReunionInput, AnfitrionUncheckedCreateWithoutReunionInput>
    connectOrCreate?: AnfitrionCreateOrConnectWithoutReunionInput
    connect?: AnfitrionWhereUniqueInput
  }

  export type SalaUpdateOneRequiredWithoutReunionNestedInput = {
    create?: XOR<SalaCreateWithoutReunionInput, SalaUncheckedCreateWithoutReunionInput>
    connectOrCreate?: SalaCreateOrConnectWithoutReunionInput
    upsert?: SalaUpsertWithoutReunionInput
    connect?: SalaWhereUniqueInput
    update?: XOR<XOR<SalaUpdateToOneWithWhereWithoutReunionInput, SalaUpdateWithoutReunionInput>, SalaUncheckedUpdateWithoutReunionInput>
  }

  export type AnfitrionUpdateOneRequiredWithoutReunionNestedInput = {
    create?: XOR<AnfitrionCreateWithoutReunionInput, AnfitrionUncheckedCreateWithoutReunionInput>
    connectOrCreate?: AnfitrionCreateOrConnectWithoutReunionInput
    upsert?: AnfitrionUpsertWithoutReunionInput
    connect?: AnfitrionWhereUniqueInput
    update?: XOR<XOR<AnfitrionUpdateToOneWithWhereWithoutReunionInput, AnfitrionUpdateWithoutReunionInput>, AnfitrionUncheckedUpdateWithoutReunionInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type AnfitrionCreateWithoutUsuarioInput = {
    Reunion?: ReunionCreateNestedManyWithoutAnfitrionInput
  }

  export type AnfitrionUncheckedCreateWithoutUsuarioInput = {
    ID_Anfitrion?: number
    Reunion?: ReunionUncheckedCreateNestedManyWithoutAnfitrionInput
  }

  export type AnfitrionCreateOrConnectWithoutUsuarioInput = {
    where: AnfitrionWhereUniqueInput
    create: XOR<AnfitrionCreateWithoutUsuarioInput, AnfitrionUncheckedCreateWithoutUsuarioInput>
  }

  export type AnfitrionCreateManyUsuarioInputEnvelope = {
    data: AnfitrionCreateManyUsuarioInput | AnfitrionCreateManyUsuarioInput[]
    skipDuplicates?: boolean
  }

  export type Super_AdministradorCreateWithoutUsuarioInput = {

  }

  export type Super_AdministradorUncheckedCreateWithoutUsuarioInput = {
    ID_Super_Administrador?: number
  }

  export type Super_AdministradorCreateOrConnectWithoutUsuarioInput = {
    where: Super_AdministradorWhereUniqueInput
    create: XOR<Super_AdministradorCreateWithoutUsuarioInput, Super_AdministradorUncheckedCreateWithoutUsuarioInput>
  }

  export type Super_AdministradorCreateManyUsuarioInputEnvelope = {
    data: Super_AdministradorCreateManyUsuarioInput | Super_AdministradorCreateManyUsuarioInput[]
    skipDuplicates?: boolean
  }

  export type AnfitrionUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: AnfitrionWhereUniqueInput
    update: XOR<AnfitrionUpdateWithoutUsuarioInput, AnfitrionUncheckedUpdateWithoutUsuarioInput>
    create: XOR<AnfitrionCreateWithoutUsuarioInput, AnfitrionUncheckedCreateWithoutUsuarioInput>
  }

  export type AnfitrionUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: AnfitrionWhereUniqueInput
    data: XOR<AnfitrionUpdateWithoutUsuarioInput, AnfitrionUncheckedUpdateWithoutUsuarioInput>
  }

  export type AnfitrionUpdateManyWithWhereWithoutUsuarioInput = {
    where: AnfitrionScalarWhereInput
    data: XOR<AnfitrionUpdateManyMutationInput, AnfitrionUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type AnfitrionScalarWhereInput = {
    AND?: AnfitrionScalarWhereInput | AnfitrionScalarWhereInput[]
    OR?: AnfitrionScalarWhereInput[]
    NOT?: AnfitrionScalarWhereInput | AnfitrionScalarWhereInput[]
    ID_Anfitrion?: IntFilter<"Anfitrion"> | number
    ID_Usuario?: IntFilter<"Anfitrion"> | number
  }

  export type Super_AdministradorUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: Super_AdministradorWhereUniqueInput
    update: XOR<Super_AdministradorUpdateWithoutUsuarioInput, Super_AdministradorUncheckedUpdateWithoutUsuarioInput>
    create: XOR<Super_AdministradorCreateWithoutUsuarioInput, Super_AdministradorUncheckedCreateWithoutUsuarioInput>
  }

  export type Super_AdministradorUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: Super_AdministradorWhereUniqueInput
    data: XOR<Super_AdministradorUpdateWithoutUsuarioInput, Super_AdministradorUncheckedUpdateWithoutUsuarioInput>
  }

  export type Super_AdministradorUpdateManyWithWhereWithoutUsuarioInput = {
    where: Super_AdministradorScalarWhereInput
    data: XOR<Super_AdministradorUpdateManyMutationInput, Super_AdministradorUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type Super_AdministradorScalarWhereInput = {
    AND?: Super_AdministradorScalarWhereInput | Super_AdministradorScalarWhereInput[]
    OR?: Super_AdministradorScalarWhereInput[]
    NOT?: Super_AdministradorScalarWhereInput | Super_AdministradorScalarWhereInput[]
    ID_Super_Administrador?: IntFilter<"Super_Administrador"> | number
    ID_Usuario?: IntFilter<"Super_Administrador"> | number
  }

  export type UsuarioCreateWithoutAnfitrionInput = {
    Email: string
    Contrasena: string
    Nombre: string
    Apellido_Paterno: string
    Apellido_Materno: string
    Telefono: Decimal | DecimalJsLike | number | string
    Super_Administrador?: Super_AdministradorCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutAnfitrionInput = {
    ID_Usuario?: number
    Email: string
    Contrasena: string
    Nombre: string
    Apellido_Paterno: string
    Apellido_Materno: string
    Telefono: Decimal | DecimalJsLike | number | string
    Super_Administrador?: Super_AdministradorUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutAnfitrionInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutAnfitrionInput, UsuarioUncheckedCreateWithoutAnfitrionInput>
  }

  export type ReunionCreateWithoutAnfitrionInput = {
    Titulo: string
    Fecha_Reunion: string
    Hora_Reunion: string
    Descripcion: string
    sala: SalaCreateNestedOneWithoutReunionInput
  }

  export type ReunionUncheckedCreateWithoutAnfitrionInput = {
    ID_Reunion?: number
    Titulo: string
    Fecha_Reunion: string
    Hora_Reunion: string
    Descripcion: string
    ID_Sala: number
  }

  export type ReunionCreateOrConnectWithoutAnfitrionInput = {
    where: ReunionWhereUniqueInput
    create: XOR<ReunionCreateWithoutAnfitrionInput, ReunionUncheckedCreateWithoutAnfitrionInput>
  }

  export type ReunionCreateManyAnfitrionInputEnvelope = {
    data: ReunionCreateManyAnfitrionInput | ReunionCreateManyAnfitrionInput[]
    skipDuplicates?: boolean
  }

  export type UsuarioUpsertWithoutAnfitrionInput = {
    update: XOR<UsuarioUpdateWithoutAnfitrionInput, UsuarioUncheckedUpdateWithoutAnfitrionInput>
    create: XOR<UsuarioCreateWithoutAnfitrionInput, UsuarioUncheckedCreateWithoutAnfitrionInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutAnfitrionInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutAnfitrionInput, UsuarioUncheckedUpdateWithoutAnfitrionInput>
  }

  export type UsuarioUpdateWithoutAnfitrionInput = {
    Email?: StringFieldUpdateOperationsInput | string
    Contrasena?: StringFieldUpdateOperationsInput | string
    Nombre?: StringFieldUpdateOperationsInput | string
    Apellido_Paterno?: StringFieldUpdateOperationsInput | string
    Apellido_Materno?: StringFieldUpdateOperationsInput | string
    Telefono?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Super_Administrador?: Super_AdministradorUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutAnfitrionInput = {
    ID_Usuario?: IntFieldUpdateOperationsInput | number
    Email?: StringFieldUpdateOperationsInput | string
    Contrasena?: StringFieldUpdateOperationsInput | string
    Nombre?: StringFieldUpdateOperationsInput | string
    Apellido_Paterno?: StringFieldUpdateOperationsInput | string
    Apellido_Materno?: StringFieldUpdateOperationsInput | string
    Telefono?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Super_Administrador?: Super_AdministradorUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type ReunionUpsertWithWhereUniqueWithoutAnfitrionInput = {
    where: ReunionWhereUniqueInput
    update: XOR<ReunionUpdateWithoutAnfitrionInput, ReunionUncheckedUpdateWithoutAnfitrionInput>
    create: XOR<ReunionCreateWithoutAnfitrionInput, ReunionUncheckedCreateWithoutAnfitrionInput>
  }

  export type ReunionUpdateWithWhereUniqueWithoutAnfitrionInput = {
    where: ReunionWhereUniqueInput
    data: XOR<ReunionUpdateWithoutAnfitrionInput, ReunionUncheckedUpdateWithoutAnfitrionInput>
  }

  export type ReunionUpdateManyWithWhereWithoutAnfitrionInput = {
    where: ReunionScalarWhereInput
    data: XOR<ReunionUpdateManyMutationInput, ReunionUncheckedUpdateManyWithoutAnfitrionInput>
  }

  export type ReunionScalarWhereInput = {
    AND?: ReunionScalarWhereInput | ReunionScalarWhereInput[]
    OR?: ReunionScalarWhereInput[]
    NOT?: ReunionScalarWhereInput | ReunionScalarWhereInput[]
    ID_Reunion?: IntFilter<"Reunion"> | number
    Titulo?: StringFilter<"Reunion"> | string
    Fecha_Reunion?: StringFilter<"Reunion"> | string
    Hora_Reunion?: StringFilter<"Reunion"> | string
    Descripcion?: StringFilter<"Reunion"> | string
    ID_Sala?: IntFilter<"Reunion"> | number
    ID_Anfitrion?: IntFilter<"Reunion"> | number
  }

  export type UsuarioCreateWithoutSuper_AdministradorInput = {
    Email: string
    Contrasena: string
    Nombre: string
    Apellido_Paterno: string
    Apellido_Materno: string
    Telefono: Decimal | DecimalJsLike | number | string
    Anfitrion?: AnfitrionCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutSuper_AdministradorInput = {
    ID_Usuario?: number
    Email: string
    Contrasena: string
    Nombre: string
    Apellido_Paterno: string
    Apellido_Materno: string
    Telefono: Decimal | DecimalJsLike | number | string
    Anfitrion?: AnfitrionUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutSuper_AdministradorInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutSuper_AdministradorInput, UsuarioUncheckedCreateWithoutSuper_AdministradorInput>
  }

  export type UsuarioUpsertWithoutSuper_AdministradorInput = {
    update: XOR<UsuarioUpdateWithoutSuper_AdministradorInput, UsuarioUncheckedUpdateWithoutSuper_AdministradorInput>
    create: XOR<UsuarioCreateWithoutSuper_AdministradorInput, UsuarioUncheckedCreateWithoutSuper_AdministradorInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutSuper_AdministradorInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutSuper_AdministradorInput, UsuarioUncheckedUpdateWithoutSuper_AdministradorInput>
  }

  export type UsuarioUpdateWithoutSuper_AdministradorInput = {
    Email?: StringFieldUpdateOperationsInput | string
    Contrasena?: StringFieldUpdateOperationsInput | string
    Nombre?: StringFieldUpdateOperationsInput | string
    Apellido_Paterno?: StringFieldUpdateOperationsInput | string
    Apellido_Materno?: StringFieldUpdateOperationsInput | string
    Telefono?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Anfitrion?: AnfitrionUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutSuper_AdministradorInput = {
    ID_Usuario?: IntFieldUpdateOperationsInput | number
    Email?: StringFieldUpdateOperationsInput | string
    Contrasena?: StringFieldUpdateOperationsInput | string
    Nombre?: StringFieldUpdateOperationsInput | string
    Apellido_Paterno?: StringFieldUpdateOperationsInput | string
    Apellido_Materno?: StringFieldUpdateOperationsInput | string
    Telefono?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Anfitrion?: AnfitrionUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type ReunionCreateWithoutSalaInput = {
    Titulo: string
    Fecha_Reunion: string
    Hora_Reunion: string
    Descripcion: string
    anfitrion: AnfitrionCreateNestedOneWithoutReunionInput
  }

  export type ReunionUncheckedCreateWithoutSalaInput = {
    ID_Reunion?: number
    Titulo: string
    Fecha_Reunion: string
    Hora_Reunion: string
    Descripcion: string
    ID_Anfitrion: number
  }

  export type ReunionCreateOrConnectWithoutSalaInput = {
    where: ReunionWhereUniqueInput
    create: XOR<ReunionCreateWithoutSalaInput, ReunionUncheckedCreateWithoutSalaInput>
  }

  export type ReunionCreateManySalaInputEnvelope = {
    data: ReunionCreateManySalaInput | ReunionCreateManySalaInput[]
    skipDuplicates?: boolean
  }

  export type ReunionUpsertWithWhereUniqueWithoutSalaInput = {
    where: ReunionWhereUniqueInput
    update: XOR<ReunionUpdateWithoutSalaInput, ReunionUncheckedUpdateWithoutSalaInput>
    create: XOR<ReunionCreateWithoutSalaInput, ReunionUncheckedCreateWithoutSalaInput>
  }

  export type ReunionUpdateWithWhereUniqueWithoutSalaInput = {
    where: ReunionWhereUniqueInput
    data: XOR<ReunionUpdateWithoutSalaInput, ReunionUncheckedUpdateWithoutSalaInput>
  }

  export type ReunionUpdateManyWithWhereWithoutSalaInput = {
    where: ReunionScalarWhereInput
    data: XOR<ReunionUpdateManyMutationInput, ReunionUncheckedUpdateManyWithoutSalaInput>
  }

  export type SalaCreateWithoutReunionInput = {
    Nombre_Sala: string
    Capacidad: number
    Piso: number
  }

  export type SalaUncheckedCreateWithoutReunionInput = {
    ID_Sala?: number
    Nombre_Sala: string
    Capacidad: number
    Piso: number
  }

  export type SalaCreateOrConnectWithoutReunionInput = {
    where: SalaWhereUniqueInput
    create: XOR<SalaCreateWithoutReunionInput, SalaUncheckedCreateWithoutReunionInput>
  }

  export type AnfitrionCreateWithoutReunionInput = {
    usuario: UsuarioCreateNestedOneWithoutAnfitrionInput
  }

  export type AnfitrionUncheckedCreateWithoutReunionInput = {
    ID_Anfitrion?: number
    ID_Usuario: number
  }

  export type AnfitrionCreateOrConnectWithoutReunionInput = {
    where: AnfitrionWhereUniqueInput
    create: XOR<AnfitrionCreateWithoutReunionInput, AnfitrionUncheckedCreateWithoutReunionInput>
  }

  export type SalaUpsertWithoutReunionInput = {
    update: XOR<SalaUpdateWithoutReunionInput, SalaUncheckedUpdateWithoutReunionInput>
    create: XOR<SalaCreateWithoutReunionInput, SalaUncheckedCreateWithoutReunionInput>
    where?: SalaWhereInput
  }

  export type SalaUpdateToOneWithWhereWithoutReunionInput = {
    where?: SalaWhereInput
    data: XOR<SalaUpdateWithoutReunionInput, SalaUncheckedUpdateWithoutReunionInput>
  }

  export type SalaUpdateWithoutReunionInput = {
    Nombre_Sala?: StringFieldUpdateOperationsInput | string
    Capacidad?: IntFieldUpdateOperationsInput | number
    Piso?: IntFieldUpdateOperationsInput | number
  }

  export type SalaUncheckedUpdateWithoutReunionInput = {
    ID_Sala?: IntFieldUpdateOperationsInput | number
    Nombre_Sala?: StringFieldUpdateOperationsInput | string
    Capacidad?: IntFieldUpdateOperationsInput | number
    Piso?: IntFieldUpdateOperationsInput | number
  }

  export type AnfitrionUpsertWithoutReunionInput = {
    update: XOR<AnfitrionUpdateWithoutReunionInput, AnfitrionUncheckedUpdateWithoutReunionInput>
    create: XOR<AnfitrionCreateWithoutReunionInput, AnfitrionUncheckedCreateWithoutReunionInput>
    where?: AnfitrionWhereInput
  }

  export type AnfitrionUpdateToOneWithWhereWithoutReunionInput = {
    where?: AnfitrionWhereInput
    data: XOR<AnfitrionUpdateWithoutReunionInput, AnfitrionUncheckedUpdateWithoutReunionInput>
  }

  export type AnfitrionUpdateWithoutReunionInput = {
    usuario?: UsuarioUpdateOneRequiredWithoutAnfitrionNestedInput
  }

  export type AnfitrionUncheckedUpdateWithoutReunionInput = {
    ID_Anfitrion?: IntFieldUpdateOperationsInput | number
    ID_Usuario?: IntFieldUpdateOperationsInput | number
  }

  export type AnfitrionCreateManyUsuarioInput = {
    ID_Anfitrion?: number
  }

  export type Super_AdministradorCreateManyUsuarioInput = {
    ID_Super_Administrador?: number
  }

  export type AnfitrionUpdateWithoutUsuarioInput = {
    Reunion?: ReunionUpdateManyWithoutAnfitrionNestedInput
  }

  export type AnfitrionUncheckedUpdateWithoutUsuarioInput = {
    ID_Anfitrion?: IntFieldUpdateOperationsInput | number
    Reunion?: ReunionUncheckedUpdateManyWithoutAnfitrionNestedInput
  }

  export type AnfitrionUncheckedUpdateManyWithoutUsuarioInput = {
    ID_Anfitrion?: IntFieldUpdateOperationsInput | number
  }

  export type Super_AdministradorUpdateWithoutUsuarioInput = {

  }

  export type Super_AdministradorUncheckedUpdateWithoutUsuarioInput = {
    ID_Super_Administrador?: IntFieldUpdateOperationsInput | number
  }

  export type Super_AdministradorUncheckedUpdateManyWithoutUsuarioInput = {
    ID_Super_Administrador?: IntFieldUpdateOperationsInput | number
  }

  export type ReunionCreateManyAnfitrionInput = {
    ID_Reunion?: number
    Titulo: string
    Fecha_Reunion: string
    Hora_Reunion: string
    Descripcion: string
    ID_Sala: number
  }

  export type ReunionUpdateWithoutAnfitrionInput = {
    Titulo?: StringFieldUpdateOperationsInput | string
    Fecha_Reunion?: StringFieldUpdateOperationsInput | string
    Hora_Reunion?: StringFieldUpdateOperationsInput | string
    Descripcion?: StringFieldUpdateOperationsInput | string
    sala?: SalaUpdateOneRequiredWithoutReunionNestedInput
  }

  export type ReunionUncheckedUpdateWithoutAnfitrionInput = {
    ID_Reunion?: IntFieldUpdateOperationsInput | number
    Titulo?: StringFieldUpdateOperationsInput | string
    Fecha_Reunion?: StringFieldUpdateOperationsInput | string
    Hora_Reunion?: StringFieldUpdateOperationsInput | string
    Descripcion?: StringFieldUpdateOperationsInput | string
    ID_Sala?: IntFieldUpdateOperationsInput | number
  }

  export type ReunionUncheckedUpdateManyWithoutAnfitrionInput = {
    ID_Reunion?: IntFieldUpdateOperationsInput | number
    Titulo?: StringFieldUpdateOperationsInput | string
    Fecha_Reunion?: StringFieldUpdateOperationsInput | string
    Hora_Reunion?: StringFieldUpdateOperationsInput | string
    Descripcion?: StringFieldUpdateOperationsInput | string
    ID_Sala?: IntFieldUpdateOperationsInput | number
  }

  export type ReunionCreateManySalaInput = {
    ID_Reunion?: number
    Titulo: string
    Fecha_Reunion: string
    Hora_Reunion: string
    Descripcion: string
    ID_Anfitrion: number
  }

  export type ReunionUpdateWithoutSalaInput = {
    Titulo?: StringFieldUpdateOperationsInput | string
    Fecha_Reunion?: StringFieldUpdateOperationsInput | string
    Hora_Reunion?: StringFieldUpdateOperationsInput | string
    Descripcion?: StringFieldUpdateOperationsInput | string
    anfitrion?: AnfitrionUpdateOneRequiredWithoutReunionNestedInput
  }

  export type ReunionUncheckedUpdateWithoutSalaInput = {
    ID_Reunion?: IntFieldUpdateOperationsInput | number
    Titulo?: StringFieldUpdateOperationsInput | string
    Fecha_Reunion?: StringFieldUpdateOperationsInput | string
    Hora_Reunion?: StringFieldUpdateOperationsInput | string
    Descripcion?: StringFieldUpdateOperationsInput | string
    ID_Anfitrion?: IntFieldUpdateOperationsInput | number
  }

  export type ReunionUncheckedUpdateManyWithoutSalaInput = {
    ID_Reunion?: IntFieldUpdateOperationsInput | number
    Titulo?: StringFieldUpdateOperationsInput | string
    Fecha_Reunion?: StringFieldUpdateOperationsInput | string
    Hora_Reunion?: StringFieldUpdateOperationsInput | string
    Descripcion?: StringFieldUpdateOperationsInput | string
    ID_Anfitrion?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UsuarioCountOutputTypeDefaultArgs instead
     */
    export type UsuarioCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsuarioCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AnfitrionCountOutputTypeDefaultArgs instead
     */
    export type AnfitrionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AnfitrionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SalaCountOutputTypeDefaultArgs instead
     */
    export type SalaCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SalaCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsuarioDefaultArgs instead
     */
    export type UsuarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsuarioDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AnfitrionDefaultArgs instead
     */
    export type AnfitrionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AnfitrionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Super_AdministradorDefaultArgs instead
     */
    export type Super_AdministradorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Super_AdministradorDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SalaDefaultArgs instead
     */
    export type SalaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SalaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReunionDefaultArgs instead
     */
    export type ReunionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReunionDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}